Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TOKEN_COMMENT
    TOKEN_ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> macros classes
Rule 2     macros -> macros macro
Rule 3     macros -> <empty>
Rule 4     macro -> reference
Rule 5     reference -> TOKEN_REFERENCE TOKEN_STRING
Rule 6     classes -> classes class
Rule 7     classes -> <empty>
Rule 8     class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB
Rule 9     symbol_decs -> symbol_decs symbol_dec
Rule 10    symbol_decs -> <empty>
Rule 11    symbol_dec -> var_dec
Rule 12    symbol_dec -> func_dec
Rule 13    var_dec -> var_type var_list TOKEN_SEMICOLON
Rule 14    var_type -> return_type
Rule 15    var_type -> lvalue1
Rule 16    var_type -> TOKEN_STATIC return_type
Rule 17    var_type -> TOKEN_STATIC lvalue1
Rule 18    return_type -> TOKEN_INT_TYPE
Rule 19    return_type -> TOKEN_REAL_TYPE
Rule 20    return_type -> TOKEN_BOOL_TYPE
Rule 21    return_type -> TOKEN_STRING_TYPE
Rule 22    var_list -> var_list TOKEN_COMMA var_list_item
Rule 23    var_list -> var_list_item
Rule 24    item1 -> TOKEN_ID TOKEN_ASSIGNMENT exp
Rule 25    var_list_item -> item1
Rule 26    var_list_item -> TOKEN_ID
Rule 27    func_dec -> var_type func_body
Rule 28    func_dec -> TOKEN_VOID func_body
Rule 29    func_dec -> TOKEN_STATIC TOKEN_VOID func_body
Rule 30    func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block
Rule 31    formal_arguments -> formal_arguments_list
Rule 32    formal_arguments -> <empty>
Rule 33    formal_arguments_list -> formal_arguments_list TOKEN_COMMA formal_argument
Rule 34    formal_arguments_list -> formal_argument
Rule 35    formal_argument -> return_type TOKEN_ID
Rule 36    formal_argument -> lvalue1 TOKEN_ID
Rule 37    block -> TOKEN_LCB statements_list TOKEN_RCB
Rule 38    block -> statement
Rule 39    statements_list -> statements_list statement
Rule 40    statements_list -> <empty>
Rule 41    statement -> TOKEN_SEMICOLON
Rule 42    statement -> exp TOKEN_SEMICOLON
Rule 43    statement -> assignment
Rule 44    statement -> print
Rule 45    statement -> statement_var_dec
Rule 46    statement -> if
Rule 47    statement -> for
Rule 48    statement -> while
Rule 49    statement -> return
Rule 50    statement -> break
Rule 51    statement -> continue
Rule 52    assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
Rule 53    lvalue -> lvalue1
Rule 54    lvalue -> lvalue2
Rule 55    lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID
Rule 56    lvalue1 -> TOKEN_ID
Rule 57    print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
Rule 58    statement_var_dec -> return_type var_list TOKEN_SEMICOLON
Rule 59    statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON
Rule 60    if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block
Rule 61    if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
Rule 62    if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
Rule 63    if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
Rule 64    elseifs -> elseifs elseif
Rule 65    elseifs -> elseif
Rule 66    elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block
Rule 67    for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
Rule 68    while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
Rule 69    return -> TOKEN_RETURN exp TOKEN_SEMICOLON
Rule 70    break -> TOKEN_BREAK TOKEN_SEMICOLON
Rule 71    continue -> TOKEN_CONTINUE TOKEN_SEMICOLON
Rule 72    exp -> TOKEN_INTEGER
Rule 73    exp -> TOKEN_REAL
Rule 74    exp -> TOKEN_TRUE
Rule 75    exp -> TOKEN_FALSE
Rule 76    exp -> TOKEN_STRING
Rule 77    exp -> lvalue
Rule 78    exp -> binary_operation
Rule 79    exp -> logical_operation
Rule 80    exp -> comparison_operation
Rule 81    exp -> bitwise_operation
Rule 82    exp -> unary_operation
Rule 83    exp -> TOKEN_LP exp TOKEN_RP
Rule 84    exp -> function_call
Rule 85    binary_operation -> exp TOKEN_ADDITION exp
Rule 86    binary_operation -> exp TOKEN_SUBTRACTION exp
Rule 87    binary_operation -> exp TOKEN_MULTIPLICATION exp
Rule 88    binary_operation -> exp TOKEN_DIVISION exp
Rule 89    binary_operation -> exp TOKEN_MODULO exp
Rule 90    binary_operation -> exp TOKEN_POWER exp
Rule 91    binary_operation -> exp TOKEN_SHIFT_LEFT exp
Rule 92    binary_operation -> exp TOKEN_SHIFT_RIGHT exp
Rule 93    logical_operation -> exp TOKEN_AND exp
Rule 94    logical_operation -> exp TOKEN_OR exp
Rule 95    comparison_operation -> exp TOKEN_LT exp
Rule 96    comparison_operation -> exp TOKEN_LE exp
Rule 97    comparison_operation -> exp TOKEN_GT exp
Rule 98    comparison_operation -> exp TOKEN_GE exp
Rule 99    comparison_operation -> exp TOKEN_EQ exp
Rule 100   comparison_operation -> exp TOKEN_NE exp
Rule 101   bitwise_operation -> exp TOKEN_BITWISE_AND exp
Rule 102   bitwise_operation -> exp TOKEN_BITWISE_OR exp
Rule 103   unary_operation -> TOKEN_SUBTRACTION exp
Rule 104   unary_operation -> TOKEN_NOT exp
Rule 105   unary_operation -> TOKEN_BITWISE_NOT exp
Rule 106   function_call -> TOKEN_ID function_call_body
Rule 107   function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
Rule 108   function_call_body -> TOKEN_LP actual_arguments TOKEN_RP
Rule 109   actual_arguments -> actual_arguments_list
Rule 110   actual_arguments -> <empty>
Rule 111   actual_arguments_list -> actual_arguments_list TOKEN_COMMA exp
Rule 112   actual_arguments_list -> exp

Terminals, with rules where they appear

TOKEN_ADDITION       : 85
TOKEN_AND            : 93
TOKEN_ASSIGNMENT     : 24 52
TOKEN_BITWISE_AND    : 101
TOKEN_BITWISE_NOT    : 105
TOKEN_BITWISE_OR     : 102
TOKEN_BOOL_TYPE      : 20
TOKEN_BREAK          : 70
TOKEN_CLASS          : 8
TOKEN_COMMA          : 22 33 111
TOKEN_COMMENT        : 
TOKEN_CONTINUE       : 71
TOKEN_DIVISION       : 88
TOKEN_DOT            : 55 107
TOKEN_ELSE           : 61 63
TOKEN_ELSEIF         : 66
TOKEN_EQ             : 99
TOKEN_ERROR          : 
TOKEN_FALSE          : 75
TOKEN_FOR            : 67
TOKEN_GE             : 98
TOKEN_GT             : 97
TOKEN_ID             : 8 24 26 30 35 36 55 55 56 67 106 107 107
TOKEN_IF             : 60 61 62 63
TOKEN_IN             : 67
TOKEN_INTEGER        : 72
TOKEN_INT_TYPE       : 18
TOKEN_LCB            : 8 37
TOKEN_LE             : 96
TOKEN_LP             : 30 57 60 61 62 63 66 67 68 83 108
TOKEN_LT             : 95
TOKEN_MODULO         : 89
TOKEN_MULTIPLICATION : 87
TOKEN_NE             : 100
TOKEN_NOT            : 104
TOKEN_OR             : 94
TOKEN_POWER          : 90
TOKEN_PRINT          : 57
TOKEN_RCB            : 8 37
TOKEN_REAL           : 73
TOKEN_REAL_TYPE      : 19
TOKEN_REFERENCE      : 5
TOKEN_RETURN         : 69
TOKEN_RP             : 30 57 60 61 62 63 66 67 68 83 108
TOKEN_SEMICOLON      : 13 41 42 52 57 58 59 69 70 71
TOKEN_SHIFT_LEFT     : 91
TOKEN_SHIFT_RIGHT    : 92
TOKEN_STATIC         : 16 17 29
TOKEN_STEPS          : 67
TOKEN_STRING         : 5 57 76
TOKEN_STRING_TYPE    : 21
TOKEN_SUBTRACTION    : 86 103
TOKEN_TO             : 67
TOKEN_TRUE           : 74
TOKEN_VOID           : 28 29
TOKEN_WHILE          : 68
error                : 

Nonterminals, with rules where they appear

actual_arguments     : 108
actual_arguments_list : 109 111
assignment           : 43
binary_operation     : 78
bitwise_operation    : 81
block                : 30 60 61 61 62 63 63 66 67 68
break                : 50
class                : 6
classes              : 1 6
comparison_operation : 80
continue             : 51
elseif               : 64 65
elseifs              : 62 63 64
exp                  : 24 42 52 60 61 62 63 66 67 67 67 68 69 83 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 104 105 111 112
for                  : 47
formal_argument      : 33 34
formal_arguments     : 30
formal_arguments_list : 31 33
func_body            : 27 28 29
func_dec             : 12
function_call        : 84
function_call_body   : 106 107
if                   : 46
item1                : 25
logical_operation    : 79
lvalue               : 52 77
lvalue1              : 15 17 36 53 59
lvalue2              : 54
macro                : 2
macros               : 1 2
print                : 44
program              : 0
reference            : 4
return               : 49
return_type          : 14 16 35 58
statement            : 38 39
statement_var_dec    : 45
statements_list      : 37 39
symbol_dec           : 9
symbol_decs          : 8 9
unary_operation      : 82
var_dec              : 11
var_list             : 13 22 58 59
var_list_item        : 22 23
var_type             : 13 27
while                : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . macros classes
    (2) macros -> . macros macro
    (3) macros -> .

    TOKEN_REFERENCE reduce using rule 3 (macros -> .)
    TOKEN_CLASS     reduce using rule 3 (macros -> .)
    $end            reduce using rule 3 (macros -> .)

    program                        shift and go to state 1
    macros                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> macros . classes
    (2) macros -> macros . macro
    (6) classes -> . classes class
    (7) classes -> .
    (4) macro -> . reference
    (5) reference -> . TOKEN_REFERENCE TOKEN_STRING

    TOKEN_CLASS     reduce using rule 7 (classes -> .)
    $end            reduce using rule 7 (classes -> .)
    TOKEN_REFERENCE shift and go to state 6

    classes                        shift and go to state 3
    macro                          shift and go to state 4
    reference                      shift and go to state 5

state 3

    (1) program -> macros classes .
    (6) classes -> classes . class
    (8) class -> . TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB

    $end            reduce using rule 1 (program -> macros classes .)
    TOKEN_CLASS     shift and go to state 8

    class                          shift and go to state 7

state 4

    (2) macros -> macros macro .

    TOKEN_REFERENCE reduce using rule 2 (macros -> macros macro .)
    TOKEN_CLASS     reduce using rule 2 (macros -> macros macro .)
    $end            reduce using rule 2 (macros -> macros macro .)


state 5

    (4) macro -> reference .

    TOKEN_REFERENCE reduce using rule 4 (macro -> reference .)
    TOKEN_CLASS     reduce using rule 4 (macro -> reference .)
    $end            reduce using rule 4 (macro -> reference .)


state 6

    (5) reference -> TOKEN_REFERENCE . TOKEN_STRING

    TOKEN_STRING    shift and go to state 9


state 7

    (6) classes -> classes class .

    TOKEN_CLASS     reduce using rule 6 (classes -> classes class .)
    $end            reduce using rule 6 (classes -> classes class .)


state 8

    (8) class -> TOKEN_CLASS . TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB

    TOKEN_ID        shift and go to state 10


state 9

    (5) reference -> TOKEN_REFERENCE TOKEN_STRING .

    TOKEN_REFERENCE reduce using rule 5 (reference -> TOKEN_REFERENCE TOKEN_STRING .)
    TOKEN_CLASS     reduce using rule 5 (reference -> TOKEN_REFERENCE TOKEN_STRING .)
    $end            reduce using rule 5 (reference -> TOKEN_REFERENCE TOKEN_STRING .)


state 10

    (8) class -> TOKEN_CLASS TOKEN_ID . TOKEN_LCB symbol_decs TOKEN_RCB

    TOKEN_LCB       shift and go to state 11


state 11

    (8) class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB . symbol_decs TOKEN_RCB
    (9) symbol_decs -> . symbol_decs symbol_dec
    (10) symbol_decs -> .

    TOKEN_RCB       reduce using rule 10 (symbol_decs -> .)
    TOKEN_VOID      reduce using rule 10 (symbol_decs -> .)
    TOKEN_STATIC    reduce using rule 10 (symbol_decs -> .)
    TOKEN_INT_TYPE  reduce using rule 10 (symbol_decs -> .)
    TOKEN_REAL_TYPE reduce using rule 10 (symbol_decs -> .)
    TOKEN_BOOL_TYPE reduce using rule 10 (symbol_decs -> .)
    TOKEN_STRING_TYPE reduce using rule 10 (symbol_decs -> .)
    TOKEN_ID        reduce using rule 10 (symbol_decs -> .)

    symbol_decs                    shift and go to state 12

state 12

    (8) class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs . TOKEN_RCB
    (9) symbol_decs -> symbol_decs . symbol_dec
    (11) symbol_dec -> . var_dec
    (12) symbol_dec -> . func_dec
    (13) var_dec -> . var_type var_list TOKEN_SEMICOLON
    (27) func_dec -> . var_type func_body
    (28) func_dec -> . TOKEN_VOID func_body
    (29) func_dec -> . TOKEN_STATIC TOKEN_VOID func_body
    (14) var_type -> . return_type
    (15) var_type -> . lvalue1
    (16) var_type -> . TOKEN_STATIC return_type
    (17) var_type -> . TOKEN_STATIC lvalue1
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID

    TOKEN_RCB       shift and go to state 14
    TOKEN_VOID      shift and go to state 19
    TOKEN_STATIC    shift and go to state 20
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26
    TOKEN_ID        shift and go to state 13

    symbol_dec                     shift and go to state 15
    var_dec                        shift and go to state 16
    func_dec                       shift and go to state 17
    var_type                       shift and go to state 18
    return_type                    shift and go to state 21
    lvalue1                        shift and go to state 22

state 13

    (56) lvalue1 -> TOKEN_ID .

    TOKEN_ID        reduce using rule 56 (lvalue1 -> TOKEN_ID .)


state 14

    (8) class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB .

    TOKEN_CLASS     reduce using rule 8 (class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB .)
    $end            reduce using rule 8 (class -> TOKEN_CLASS TOKEN_ID TOKEN_LCB symbol_decs TOKEN_RCB .)


state 15

    (9) symbol_decs -> symbol_decs symbol_dec .

    TOKEN_RCB       reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_VOID      reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_STATIC    reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_INT_TYPE  reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_REAL_TYPE reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_BOOL_TYPE reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_STRING_TYPE reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)
    TOKEN_ID        reduce using rule 9 (symbol_decs -> symbol_decs symbol_dec .)


state 16

    (11) symbol_dec -> var_dec .

    TOKEN_RCB       reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_VOID      reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_STATIC    reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_INT_TYPE  reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_REAL_TYPE reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_BOOL_TYPE reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_STRING_TYPE reduce using rule 11 (symbol_dec -> var_dec .)
    TOKEN_ID        reduce using rule 11 (symbol_dec -> var_dec .)


state 17

    (12) symbol_dec -> func_dec .

    TOKEN_RCB       reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_VOID      reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_STATIC    reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_INT_TYPE  reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_REAL_TYPE reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_BOOL_TYPE reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_STRING_TYPE reduce using rule 12 (symbol_dec -> func_dec .)
    TOKEN_ID        reduce using rule 12 (symbol_dec -> func_dec .)


state 18

    (13) var_dec -> var_type . var_list TOKEN_SEMICOLON
    (27) func_dec -> var_type . func_body
    (22) var_list -> . var_list TOKEN_COMMA var_list_item
    (23) var_list -> . var_list_item
    (30) func_body -> . TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block
    (25) var_list_item -> . item1
    (26) var_list_item -> . TOKEN_ID
    (24) item1 -> . TOKEN_ID TOKEN_ASSIGNMENT exp

    TOKEN_ID        shift and go to state 30

    var_list                       shift and go to state 27
    func_body                      shift and go to state 28
    var_list_item                  shift and go to state 29
    item1                          shift and go to state 31

state 19

    (28) func_dec -> TOKEN_VOID . func_body
    (30) func_body -> . TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block

    TOKEN_ID        shift and go to state 33

    func_body                      shift and go to state 32

state 20

    (29) func_dec -> TOKEN_STATIC . TOKEN_VOID func_body
    (16) var_type -> TOKEN_STATIC . return_type
    (17) var_type -> TOKEN_STATIC . lvalue1
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID

    TOKEN_VOID      shift and go to state 34
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26
    TOKEN_ID        shift and go to state 13

    return_type                    shift and go to state 35
    lvalue1                        shift and go to state 36

state 21

    (14) var_type -> return_type .

    TOKEN_ID        reduce using rule 14 (var_type -> return_type .)


state 22

    (15) var_type -> lvalue1 .

    TOKEN_ID        reduce using rule 15 (var_type -> lvalue1 .)


state 23

    (18) return_type -> TOKEN_INT_TYPE .

    TOKEN_ID        reduce using rule 18 (return_type -> TOKEN_INT_TYPE .)


state 24

    (19) return_type -> TOKEN_REAL_TYPE .

    TOKEN_ID        reduce using rule 19 (return_type -> TOKEN_REAL_TYPE .)


state 25

    (20) return_type -> TOKEN_BOOL_TYPE .

    TOKEN_ID        reduce using rule 20 (return_type -> TOKEN_BOOL_TYPE .)


state 26

    (21) return_type -> TOKEN_STRING_TYPE .

    TOKEN_ID        reduce using rule 21 (return_type -> TOKEN_STRING_TYPE .)


state 27

    (13) var_dec -> var_type var_list . TOKEN_SEMICOLON
    (22) var_list -> var_list . TOKEN_COMMA var_list_item

    TOKEN_SEMICOLON shift and go to state 37
    TOKEN_COMMA     shift and go to state 38


state 28

    (27) func_dec -> var_type func_body .

    TOKEN_RCB       reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_VOID      reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_STATIC    reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_INT_TYPE  reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_REAL_TYPE reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_BOOL_TYPE reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_STRING_TYPE reduce using rule 27 (func_dec -> var_type func_body .)
    TOKEN_ID        reduce using rule 27 (func_dec -> var_type func_body .)


state 29

    (23) var_list -> var_list_item .

    TOKEN_SEMICOLON reduce using rule 23 (var_list -> var_list_item .)
    TOKEN_COMMA     reduce using rule 23 (var_list -> var_list_item .)


state 30

    (30) func_body -> TOKEN_ID . TOKEN_LP formal_arguments TOKEN_RP block
    (26) var_list_item -> TOKEN_ID .
    (24) item1 -> TOKEN_ID . TOKEN_ASSIGNMENT exp

    TOKEN_LP        shift and go to state 39
    TOKEN_SEMICOLON reduce using rule 26 (var_list_item -> TOKEN_ID .)
    TOKEN_COMMA     reduce using rule 26 (var_list_item -> TOKEN_ID .)
    TOKEN_ASSIGNMENT shift and go to state 40


state 31

    (25) var_list_item -> item1 .

    TOKEN_SEMICOLON reduce using rule 25 (var_list_item -> item1 .)
    TOKEN_COMMA     reduce using rule 25 (var_list_item -> item1 .)


state 32

    (28) func_dec -> TOKEN_VOID func_body .

    TOKEN_RCB       reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_VOID      reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_STATIC    reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_INT_TYPE  reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_REAL_TYPE reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_BOOL_TYPE reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_STRING_TYPE reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)
    TOKEN_ID        reduce using rule 28 (func_dec -> TOKEN_VOID func_body .)


state 33

    (30) func_body -> TOKEN_ID . TOKEN_LP formal_arguments TOKEN_RP block

    TOKEN_LP        shift and go to state 39


state 34

    (29) func_dec -> TOKEN_STATIC TOKEN_VOID . func_body
    (30) func_body -> . TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block

    TOKEN_ID        shift and go to state 33

    func_body                      shift and go to state 41

state 35

    (16) var_type -> TOKEN_STATIC return_type .

    TOKEN_ID        reduce using rule 16 (var_type -> TOKEN_STATIC return_type .)


state 36

    (17) var_type -> TOKEN_STATIC lvalue1 .

    TOKEN_ID        reduce using rule 17 (var_type -> TOKEN_STATIC lvalue1 .)


state 37

    (13) var_dec -> var_type var_list TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 13 (var_dec -> var_type var_list TOKEN_SEMICOLON .)


state 38

    (22) var_list -> var_list TOKEN_COMMA . var_list_item
    (25) var_list_item -> . item1
    (26) var_list_item -> . TOKEN_ID
    (24) item1 -> . TOKEN_ID TOKEN_ASSIGNMENT exp

    TOKEN_ID        shift and go to state 43

    var_list_item                  shift and go to state 42
    item1                          shift and go to state 31

state 39

    (30) func_body -> TOKEN_ID TOKEN_LP . formal_arguments TOKEN_RP block
    (31) formal_arguments -> . formal_arguments_list
    (32) formal_arguments -> .
    (33) formal_arguments_list -> . formal_arguments_list TOKEN_COMMA formal_argument
    (34) formal_arguments_list -> . formal_argument
    (35) formal_argument -> . return_type TOKEN_ID
    (36) formal_argument -> . lvalue1 TOKEN_ID
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID

    TOKEN_RP        reduce using rule 32 (formal_arguments -> .)
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26
    TOKEN_ID        shift and go to state 13

    formal_arguments               shift and go to state 44
    formal_arguments_list          shift and go to state 45
    formal_argument                shift and go to state 46
    return_type                    shift and go to state 47
    lvalue1                        shift and go to state 48

state 40

    (24) item1 -> TOKEN_ID TOKEN_ASSIGNMENT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 50
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 41

    (29) func_dec -> TOKEN_STATIC TOKEN_VOID func_body .

    TOKEN_RCB       reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_VOID      reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_STATIC    reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_INT_TYPE  reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_REAL_TYPE reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_BOOL_TYPE reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_STRING_TYPE reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)
    TOKEN_ID        reduce using rule 29 (func_dec -> TOKEN_STATIC TOKEN_VOID func_body .)


state 42

    (22) var_list -> var_list TOKEN_COMMA var_list_item .

    TOKEN_SEMICOLON reduce using rule 22 (var_list -> var_list TOKEN_COMMA var_list_item .)
    TOKEN_COMMA     reduce using rule 22 (var_list -> var_list TOKEN_COMMA var_list_item .)


state 43

    (26) var_list_item -> TOKEN_ID .
    (24) item1 -> TOKEN_ID . TOKEN_ASSIGNMENT exp

    TOKEN_SEMICOLON reduce using rule 26 (var_list_item -> TOKEN_ID .)
    TOKEN_COMMA     reduce using rule 26 (var_list_item -> TOKEN_ID .)
    TOKEN_ASSIGNMENT shift and go to state 40


state 44

    (30) func_body -> TOKEN_ID TOKEN_LP formal_arguments . TOKEN_RP block

    TOKEN_RP        shift and go to state 69


state 45

    (31) formal_arguments -> formal_arguments_list .
    (33) formal_arguments_list -> formal_arguments_list . TOKEN_COMMA formal_argument

    TOKEN_RP        reduce using rule 31 (formal_arguments -> formal_arguments_list .)
    TOKEN_COMMA     shift and go to state 70


state 46

    (34) formal_arguments_list -> formal_argument .

    TOKEN_COMMA     reduce using rule 34 (formal_arguments_list -> formal_argument .)
    TOKEN_RP        reduce using rule 34 (formal_arguments_list -> formal_argument .)


state 47

    (35) formal_argument -> return_type . TOKEN_ID

    TOKEN_ID        shift and go to state 71


state 48

    (36) formal_argument -> lvalue1 . TOKEN_ID

    TOKEN_ID        shift and go to state 72


state 49

    (106) function_call -> TOKEN_ID . function_call_body
    (107) function_call -> TOKEN_ID . TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> TOKEN_ID .
    (55) lvalue2 -> TOKEN_ID . TOKEN_DOT TOKEN_ID
    (108) function_call_body -> . TOKEN_LP actual_arguments TOKEN_RP

    TOKEN_DOT       shift and go to state 74
    TOKEN_ADDITION  reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_SUBTRACTION reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_MULTIPLICATION reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_DIVISION  reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_MODULO    reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_POWER     reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_SHIFT_LEFT reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_SHIFT_RIGHT reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_AND       reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_OR        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_LT        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_LE        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_GT        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_GE        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_EQ        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_NE        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_BITWISE_AND reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_BITWISE_OR reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_SEMICOLON reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_COMMA     reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_RP        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_TO        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_STEPS     reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_ID        reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_ASSIGNMENT reduce using rule 56 (lvalue1 -> TOKEN_ID .)
    TOKEN_LP        shift and go to state 75

    function_call_body             shift and go to state 73

state 50

    (24) item1 -> TOKEN_ID TOKEN_ASSIGNMENT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON reduce using rule 24 (item1 -> TOKEN_ID TOKEN_ASSIGNMENT exp .)
    TOKEN_COMMA     reduce using rule 24 (item1 -> TOKEN_ID TOKEN_ASSIGNMENT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 51

    (72) exp -> TOKEN_INTEGER .

    TOKEN_ADDITION  reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_SUBTRACTION reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_MULTIPLICATION reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_DIVISION  reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_MODULO    reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_POWER     reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_SHIFT_LEFT reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_SHIFT_RIGHT reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_AND       reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_OR        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_LT        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_LE        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_GT        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_GE        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_EQ        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_NE        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_BITWISE_AND reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_BITWISE_OR reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_SEMICOLON reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_COMMA     reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_RP        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_TO        reduce using rule 72 (exp -> TOKEN_INTEGER .)
    TOKEN_STEPS     reduce using rule 72 (exp -> TOKEN_INTEGER .)


state 52

    (73) exp -> TOKEN_REAL .

    TOKEN_ADDITION  reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_SUBTRACTION reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_MULTIPLICATION reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_DIVISION  reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_MODULO    reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_POWER     reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_SHIFT_LEFT reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_SHIFT_RIGHT reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_AND       reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_OR        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_LT        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_LE        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_GT        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_GE        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_EQ        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_NE        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_BITWISE_AND reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_BITWISE_OR reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_SEMICOLON reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_COMMA     reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_RP        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_TO        reduce using rule 73 (exp -> TOKEN_REAL .)
    TOKEN_STEPS     reduce using rule 73 (exp -> TOKEN_REAL .)


state 53

    (74) exp -> TOKEN_TRUE .

    TOKEN_ADDITION  reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_SUBTRACTION reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_MULTIPLICATION reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_DIVISION  reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_MODULO    reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_POWER     reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_SHIFT_LEFT reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_SHIFT_RIGHT reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_AND       reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_OR        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_LT        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_LE        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_GT        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_GE        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_EQ        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_NE        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_BITWISE_AND reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_BITWISE_OR reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_SEMICOLON reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_COMMA     reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_RP        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_TO        reduce using rule 74 (exp -> TOKEN_TRUE .)
    TOKEN_STEPS     reduce using rule 74 (exp -> TOKEN_TRUE .)


state 54

    (75) exp -> TOKEN_FALSE .

    TOKEN_ADDITION  reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_SUBTRACTION reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_MULTIPLICATION reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_DIVISION  reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_MODULO    reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_POWER     reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_SHIFT_LEFT reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_SHIFT_RIGHT reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_AND       reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_OR        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_LT        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_LE        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_GT        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_GE        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_EQ        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_NE        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_BITWISE_AND reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_BITWISE_OR reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_SEMICOLON reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_COMMA     reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_RP        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_TO        reduce using rule 75 (exp -> TOKEN_FALSE .)
    TOKEN_STEPS     reduce using rule 75 (exp -> TOKEN_FALSE .)


state 55

    (76) exp -> TOKEN_STRING .

    TOKEN_ADDITION  reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_SUBTRACTION reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_MULTIPLICATION reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_DIVISION  reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_MODULO    reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_POWER     reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_SHIFT_LEFT reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_SHIFT_RIGHT reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_AND       reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_OR        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_LT        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_LE        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_GT        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_GE        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_EQ        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_NE        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_BITWISE_AND reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_BITWISE_OR reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_SEMICOLON reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_COMMA     reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_RP        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_TO        reduce using rule 76 (exp -> TOKEN_STRING .)
    TOKEN_STEPS     reduce using rule 76 (exp -> TOKEN_STRING .)


state 56

    (77) exp -> lvalue .

    TOKEN_ADDITION  reduce using rule 77 (exp -> lvalue .)
    TOKEN_SUBTRACTION reduce using rule 77 (exp -> lvalue .)
    TOKEN_MULTIPLICATION reduce using rule 77 (exp -> lvalue .)
    TOKEN_DIVISION  reduce using rule 77 (exp -> lvalue .)
    TOKEN_MODULO    reduce using rule 77 (exp -> lvalue .)
    TOKEN_POWER     reduce using rule 77 (exp -> lvalue .)
    TOKEN_SHIFT_LEFT reduce using rule 77 (exp -> lvalue .)
    TOKEN_SHIFT_RIGHT reduce using rule 77 (exp -> lvalue .)
    TOKEN_AND       reduce using rule 77 (exp -> lvalue .)
    TOKEN_OR        reduce using rule 77 (exp -> lvalue .)
    TOKEN_LT        reduce using rule 77 (exp -> lvalue .)
    TOKEN_LE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_GT        reduce using rule 77 (exp -> lvalue .)
    TOKEN_GE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_EQ        reduce using rule 77 (exp -> lvalue .)
    TOKEN_NE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_BITWISE_AND reduce using rule 77 (exp -> lvalue .)
    TOKEN_BITWISE_OR reduce using rule 77 (exp -> lvalue .)
    TOKEN_SEMICOLON reduce using rule 77 (exp -> lvalue .)
    TOKEN_COMMA     reduce using rule 77 (exp -> lvalue .)
    TOKEN_RP        reduce using rule 77 (exp -> lvalue .)
    TOKEN_TO        reduce using rule 77 (exp -> lvalue .)
    TOKEN_STEPS     reduce using rule 77 (exp -> lvalue .)


state 57

    (78) exp -> binary_operation .

    TOKEN_ADDITION  reduce using rule 78 (exp -> binary_operation .)
    TOKEN_SUBTRACTION reduce using rule 78 (exp -> binary_operation .)
    TOKEN_MULTIPLICATION reduce using rule 78 (exp -> binary_operation .)
    TOKEN_DIVISION  reduce using rule 78 (exp -> binary_operation .)
    TOKEN_MODULO    reduce using rule 78 (exp -> binary_operation .)
    TOKEN_POWER     reduce using rule 78 (exp -> binary_operation .)
    TOKEN_SHIFT_LEFT reduce using rule 78 (exp -> binary_operation .)
    TOKEN_SHIFT_RIGHT reduce using rule 78 (exp -> binary_operation .)
    TOKEN_AND       reduce using rule 78 (exp -> binary_operation .)
    TOKEN_OR        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_LT        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_LE        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_GT        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_GE        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_EQ        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_NE        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_BITWISE_AND reduce using rule 78 (exp -> binary_operation .)
    TOKEN_BITWISE_OR reduce using rule 78 (exp -> binary_operation .)
    TOKEN_SEMICOLON reduce using rule 78 (exp -> binary_operation .)
    TOKEN_COMMA     reduce using rule 78 (exp -> binary_operation .)
    TOKEN_RP        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_TO        reduce using rule 78 (exp -> binary_operation .)
    TOKEN_STEPS     reduce using rule 78 (exp -> binary_operation .)


state 58

    (79) exp -> logical_operation .

    TOKEN_ADDITION  reduce using rule 79 (exp -> logical_operation .)
    TOKEN_SUBTRACTION reduce using rule 79 (exp -> logical_operation .)
    TOKEN_MULTIPLICATION reduce using rule 79 (exp -> logical_operation .)
    TOKEN_DIVISION  reduce using rule 79 (exp -> logical_operation .)
    TOKEN_MODULO    reduce using rule 79 (exp -> logical_operation .)
    TOKEN_POWER     reduce using rule 79 (exp -> logical_operation .)
    TOKEN_SHIFT_LEFT reduce using rule 79 (exp -> logical_operation .)
    TOKEN_SHIFT_RIGHT reduce using rule 79 (exp -> logical_operation .)
    TOKEN_AND       reduce using rule 79 (exp -> logical_operation .)
    TOKEN_OR        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_LT        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_LE        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_GT        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_GE        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_EQ        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_NE        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_BITWISE_AND reduce using rule 79 (exp -> logical_operation .)
    TOKEN_BITWISE_OR reduce using rule 79 (exp -> logical_operation .)
    TOKEN_SEMICOLON reduce using rule 79 (exp -> logical_operation .)
    TOKEN_COMMA     reduce using rule 79 (exp -> logical_operation .)
    TOKEN_RP        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_TO        reduce using rule 79 (exp -> logical_operation .)
    TOKEN_STEPS     reduce using rule 79 (exp -> logical_operation .)


state 59

    (80) exp -> comparison_operation .

    TOKEN_ADDITION  reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_SUBTRACTION reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_MULTIPLICATION reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_DIVISION  reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_MODULO    reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_POWER     reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_SHIFT_LEFT reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_SHIFT_RIGHT reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_AND       reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_OR        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_LT        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_LE        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_GT        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_GE        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_EQ        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_NE        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_BITWISE_AND reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_BITWISE_OR reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_SEMICOLON reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_COMMA     reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_RP        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_TO        reduce using rule 80 (exp -> comparison_operation .)
    TOKEN_STEPS     reduce using rule 80 (exp -> comparison_operation .)


state 60

    (81) exp -> bitwise_operation .

    TOKEN_ADDITION  reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_SUBTRACTION reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_MULTIPLICATION reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_DIVISION  reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_MODULO    reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_POWER     reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_SHIFT_LEFT reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_SHIFT_RIGHT reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_AND       reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_OR        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_LT        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_LE        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_GT        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_GE        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_EQ        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_NE        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_BITWISE_AND reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_BITWISE_OR reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_SEMICOLON reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_COMMA     reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_RP        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_TO        reduce using rule 81 (exp -> bitwise_operation .)
    TOKEN_STEPS     reduce using rule 81 (exp -> bitwise_operation .)


state 61

    (82) exp -> unary_operation .

    TOKEN_ADDITION  reduce using rule 82 (exp -> unary_operation .)
    TOKEN_SUBTRACTION reduce using rule 82 (exp -> unary_operation .)
    TOKEN_MULTIPLICATION reduce using rule 82 (exp -> unary_operation .)
    TOKEN_DIVISION  reduce using rule 82 (exp -> unary_operation .)
    TOKEN_MODULO    reduce using rule 82 (exp -> unary_operation .)
    TOKEN_POWER     reduce using rule 82 (exp -> unary_operation .)
    TOKEN_SHIFT_LEFT reduce using rule 82 (exp -> unary_operation .)
    TOKEN_SHIFT_RIGHT reduce using rule 82 (exp -> unary_operation .)
    TOKEN_AND       reduce using rule 82 (exp -> unary_operation .)
    TOKEN_OR        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_LT        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_LE        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_GT        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_GE        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_EQ        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_NE        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_BITWISE_AND reduce using rule 82 (exp -> unary_operation .)
    TOKEN_BITWISE_OR reduce using rule 82 (exp -> unary_operation .)
    TOKEN_SEMICOLON reduce using rule 82 (exp -> unary_operation .)
    TOKEN_COMMA     reduce using rule 82 (exp -> unary_operation .)
    TOKEN_RP        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_TO        reduce using rule 82 (exp -> unary_operation .)
    TOKEN_STEPS     reduce using rule 82 (exp -> unary_operation .)


state 62

    (83) exp -> TOKEN_LP . exp TOKEN_RP
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 94
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 63

    (84) exp -> function_call .

    TOKEN_ADDITION  reduce using rule 84 (exp -> function_call .)
    TOKEN_SUBTRACTION reduce using rule 84 (exp -> function_call .)
    TOKEN_MULTIPLICATION reduce using rule 84 (exp -> function_call .)
    TOKEN_DIVISION  reduce using rule 84 (exp -> function_call .)
    TOKEN_MODULO    reduce using rule 84 (exp -> function_call .)
    TOKEN_POWER     reduce using rule 84 (exp -> function_call .)
    TOKEN_SHIFT_LEFT reduce using rule 84 (exp -> function_call .)
    TOKEN_SHIFT_RIGHT reduce using rule 84 (exp -> function_call .)
    TOKEN_AND       reduce using rule 84 (exp -> function_call .)
    TOKEN_OR        reduce using rule 84 (exp -> function_call .)
    TOKEN_LT        reduce using rule 84 (exp -> function_call .)
    TOKEN_LE        reduce using rule 84 (exp -> function_call .)
    TOKEN_GT        reduce using rule 84 (exp -> function_call .)
    TOKEN_GE        reduce using rule 84 (exp -> function_call .)
    TOKEN_EQ        reduce using rule 84 (exp -> function_call .)
    TOKEN_NE        reduce using rule 84 (exp -> function_call .)
    TOKEN_BITWISE_AND reduce using rule 84 (exp -> function_call .)
    TOKEN_BITWISE_OR reduce using rule 84 (exp -> function_call .)
    TOKEN_SEMICOLON reduce using rule 84 (exp -> function_call .)
    TOKEN_COMMA     reduce using rule 84 (exp -> function_call .)
    TOKEN_RP        reduce using rule 84 (exp -> function_call .)
    TOKEN_TO        reduce using rule 84 (exp -> function_call .)
    TOKEN_STEPS     reduce using rule 84 (exp -> function_call .)


state 64

    (53) lvalue -> lvalue1 .

    TOKEN_ADDITION  reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SUBTRACTION reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_MULTIPLICATION reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_DIVISION  reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_MODULO    reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_POWER     reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SHIFT_LEFT reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SHIFT_RIGHT reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_AND       reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_OR        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_LT        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_LE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_GT        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_GE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_EQ        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_NE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_BITWISE_AND reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_BITWISE_OR reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SEMICOLON reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_COMMA     reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_RP        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_TO        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_STEPS     reduce using rule 53 (lvalue -> lvalue1 .)


state 65

    (54) lvalue -> lvalue2 .

    TOKEN_ADDITION  reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_SUBTRACTION reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_MULTIPLICATION reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_DIVISION  reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_MODULO    reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_POWER     reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_SHIFT_LEFT reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_SHIFT_RIGHT reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_AND       reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_OR        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_LT        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_LE        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_GT        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_GE        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_EQ        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_NE        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_BITWISE_AND reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_BITWISE_OR reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_SEMICOLON reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_COMMA     reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_RP        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_TO        reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_STEPS     reduce using rule 54 (lvalue -> lvalue2 .)
    TOKEN_ASSIGNMENT reduce using rule 54 (lvalue -> lvalue2 .)


state 66

    (103) unary_operation -> TOKEN_SUBTRACTION . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 95
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 67

    (104) unary_operation -> TOKEN_NOT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 96
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 68

    (105) unary_operation -> TOKEN_BITWISE_NOT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 97
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 69

    (30) func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    block                          shift and go to state 98
    statement                      shift and go to state 100
    exp                            shift and go to state 102
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 70

    (33) formal_arguments_list -> formal_arguments_list TOKEN_COMMA . formal_argument
    (35) formal_argument -> . return_type TOKEN_ID
    (36) formal_argument -> . lvalue1 TOKEN_ID
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID

    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26
    TOKEN_ID        shift and go to state 13

    formal_argument                shift and go to state 122
    return_type                    shift and go to state 47
    lvalue1                        shift and go to state 48

state 71

    (35) formal_argument -> return_type TOKEN_ID .

    TOKEN_COMMA     reduce using rule 35 (formal_argument -> return_type TOKEN_ID .)
    TOKEN_RP        reduce using rule 35 (formal_argument -> return_type TOKEN_ID .)


state 72

    (36) formal_argument -> lvalue1 TOKEN_ID .

    TOKEN_COMMA     reduce using rule 36 (formal_argument -> lvalue1 TOKEN_ID .)
    TOKEN_RP        reduce using rule 36 (formal_argument -> lvalue1 TOKEN_ID .)


state 73

    (106) function_call -> TOKEN_ID function_call_body .

    TOKEN_ADDITION  reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_SUBTRACTION reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_MULTIPLICATION reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_DIVISION  reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_MODULO    reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_POWER     reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_SHIFT_LEFT reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_SHIFT_RIGHT reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_AND       reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_OR        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_LT        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_LE        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_GT        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_GE        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_EQ        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_NE        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_BITWISE_AND reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_BITWISE_OR reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_SEMICOLON reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_COMMA     reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_RP        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_TO        reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)
    TOKEN_STEPS     reduce using rule 106 (function_call -> TOKEN_ID function_call_body .)


state 74

    (107) function_call -> TOKEN_ID TOKEN_DOT . TOKEN_ID function_call_body
    (55) lvalue2 -> TOKEN_ID TOKEN_DOT . TOKEN_ID

    TOKEN_ID        shift and go to state 123


state 75

    (108) function_call_body -> TOKEN_LP . actual_arguments TOKEN_RP
    (109) actual_arguments -> . actual_arguments_list
    (110) actual_arguments -> .
    (111) actual_arguments_list -> . actual_arguments_list TOKEN_COMMA exp
    (112) actual_arguments_list -> . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_RP        reduce using rule 110 (actual_arguments -> .)
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    actual_arguments               shift and go to state 124
    actual_arguments_list          shift and go to state 125
    exp                            shift and go to state 126
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 76

    (85) binary_operation -> exp TOKEN_ADDITION . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 127
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 77

    (86) binary_operation -> exp TOKEN_SUBTRACTION . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 128
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 78

    (87) binary_operation -> exp TOKEN_MULTIPLICATION . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 129
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 79

    (88) binary_operation -> exp TOKEN_DIVISION . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 130
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 80

    (89) binary_operation -> exp TOKEN_MODULO . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 131
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 81

    (90) binary_operation -> exp TOKEN_POWER . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 132
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 82

    (91) binary_operation -> exp TOKEN_SHIFT_LEFT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 133
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 83

    (92) binary_operation -> exp TOKEN_SHIFT_RIGHT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 134
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 84

    (93) logical_operation -> exp TOKEN_AND . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 135
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 85

    (94) logical_operation -> exp TOKEN_OR . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 136
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 86

    (95) comparison_operation -> exp TOKEN_LT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 137
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 87

    (96) comparison_operation -> exp TOKEN_LE . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 138
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 88

    (97) comparison_operation -> exp TOKEN_GT . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 139
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 89

    (98) comparison_operation -> exp TOKEN_GE . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 140
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 90

    (99) comparison_operation -> exp TOKEN_EQ . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 141
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 91

    (100) comparison_operation -> exp TOKEN_NE . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 142
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 92

    (101) bitwise_operation -> exp TOKEN_BITWISE_AND . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 143
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 93

    (102) bitwise_operation -> exp TOKEN_BITWISE_OR . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 144
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 94

    (83) exp -> TOKEN_LP exp . TOKEN_RP
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_RP        shift and go to state 145
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 95

    (103) unary_operation -> TOKEN_SUBTRACTION exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_SUBTRACTION reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_MULTIPLICATION reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_DIVISION  reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_MODULO    reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_POWER     reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_SHIFT_LEFT reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_AND       reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_OR        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_LT        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_LE        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_GT        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_GE        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_EQ        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_NE        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_BITWISE_AND reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_BITWISE_OR reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_SEMICOLON reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_COMMA     reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_RP        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_TO        reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)
    TOKEN_STEPS     reduce using rule 103 (unary_operation -> TOKEN_SUBTRACTION exp .)

  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_MULTIPLICATION [ shift and go to state 78 ]
  ! TOKEN_DIVISION  [ shift and go to state 79 ]
  ! TOKEN_MODULO    [ shift and go to state 80 ]
  ! TOKEN_POWER     [ shift and go to state 81 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 96

    (104) unary_operation -> TOKEN_NOT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_OR        reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_SEMICOLON reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_COMMA     reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_RP        reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_TO        reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_STEPS     reduce using rule 104 (unary_operation -> TOKEN_NOT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93

  ! TOKEN_ADDITION  [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_LT        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_LE        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_GT        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_GE        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_EQ        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_NE        [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_BITWISE_AND [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_BITWISE_OR [ reduce using rule 104 (unary_operation -> TOKEN_NOT exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]


state 97

    (105) unary_operation -> TOKEN_BITWISE_NOT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_OR        reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_BITWISE_AND reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_BITWISE_OR reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_SEMICOLON reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_COMMA     reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_RP        reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_TO        reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_STEPS     reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91

  ! TOKEN_ADDITION  [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_LT        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_LE        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_GT        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_GE        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_EQ        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_NE        [ reduce using rule 105 (unary_operation -> TOKEN_BITWISE_NOT exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 98

    (30) func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .

    TOKEN_RCB       reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_VOID      reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_STATIC    reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_INT_TYPE  reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_REAL_TYPE reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_BOOL_TYPE reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_STRING_TYPE reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)
    TOKEN_ID        reduce using rule 30 (func_body -> TOKEN_ID TOKEN_LP formal_arguments TOKEN_RP block .)


state 99

    (37) block -> TOKEN_LCB . statements_list TOKEN_RCB
    (39) statements_list -> . statements_list statement
    (40) statements_list -> .

    TOKEN_RCB       reduce using rule 40 (statements_list -> .)
    TOKEN_SEMICOLON reduce using rule 40 (statements_list -> .)
    TOKEN_INTEGER   reduce using rule 40 (statements_list -> .)
    TOKEN_REAL      reduce using rule 40 (statements_list -> .)
    TOKEN_TRUE      reduce using rule 40 (statements_list -> .)
    TOKEN_FALSE     reduce using rule 40 (statements_list -> .)
    TOKEN_STRING    reduce using rule 40 (statements_list -> .)
    TOKEN_LP        reduce using rule 40 (statements_list -> .)
    TOKEN_PRINT     reduce using rule 40 (statements_list -> .)
    TOKEN_IF        reduce using rule 40 (statements_list -> .)
    TOKEN_FOR       reduce using rule 40 (statements_list -> .)
    TOKEN_WHILE     reduce using rule 40 (statements_list -> .)
    TOKEN_RETURN    reduce using rule 40 (statements_list -> .)
    TOKEN_BREAK     reduce using rule 40 (statements_list -> .)
    TOKEN_CONTINUE  reduce using rule 40 (statements_list -> .)
    TOKEN_SUBTRACTION reduce using rule 40 (statements_list -> .)
    TOKEN_NOT       reduce using rule 40 (statements_list -> .)
    TOKEN_BITWISE_NOT reduce using rule 40 (statements_list -> .)
    TOKEN_ID        reduce using rule 40 (statements_list -> .)
    TOKEN_INT_TYPE  reduce using rule 40 (statements_list -> .)
    TOKEN_REAL_TYPE reduce using rule 40 (statements_list -> .)
    TOKEN_BOOL_TYPE reduce using rule 40 (statements_list -> .)
    TOKEN_STRING_TYPE reduce using rule 40 (statements_list -> .)

    statements_list                shift and go to state 146

state 100

    (38) block -> statement .

    TOKEN_RCB       reduce using rule 38 (block -> statement .)
    TOKEN_VOID      reduce using rule 38 (block -> statement .)
    TOKEN_STATIC    reduce using rule 38 (block -> statement .)
    TOKEN_INT_TYPE  reduce using rule 38 (block -> statement .)
    TOKEN_REAL_TYPE reduce using rule 38 (block -> statement .)
    TOKEN_BOOL_TYPE reduce using rule 38 (block -> statement .)
    TOKEN_STRING_TYPE reduce using rule 38 (block -> statement .)
    TOKEN_ID        reduce using rule 38 (block -> statement .)
    TOKEN_ELSE      reduce using rule 38 (block -> statement .)
    TOKEN_ELSEIF    reduce using rule 38 (block -> statement .)
    TOKEN_SEMICOLON reduce using rule 38 (block -> statement .)
    TOKEN_INTEGER   reduce using rule 38 (block -> statement .)
    TOKEN_REAL      reduce using rule 38 (block -> statement .)
    TOKEN_TRUE      reduce using rule 38 (block -> statement .)
    TOKEN_FALSE     reduce using rule 38 (block -> statement .)
    TOKEN_STRING    reduce using rule 38 (block -> statement .)
    TOKEN_LP        reduce using rule 38 (block -> statement .)
    TOKEN_PRINT     reduce using rule 38 (block -> statement .)
    TOKEN_IF        reduce using rule 38 (block -> statement .)
    TOKEN_FOR       reduce using rule 38 (block -> statement .)
    TOKEN_WHILE     reduce using rule 38 (block -> statement .)
    TOKEN_RETURN    reduce using rule 38 (block -> statement .)
    TOKEN_BREAK     reduce using rule 38 (block -> statement .)
    TOKEN_CONTINUE  reduce using rule 38 (block -> statement .)
    TOKEN_SUBTRACTION reduce using rule 38 (block -> statement .)
    TOKEN_NOT       reduce using rule 38 (block -> statement .)
    TOKEN_BITWISE_NOT reduce using rule 38 (block -> statement .)


state 101

    (41) statement -> TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 41 (statement -> TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 41 (statement -> TOKEN_SEMICOLON .)


state 102

    (42) statement -> exp . TOKEN_SEMICOLON
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON shift and go to state 147
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 103

    (43) statement -> assignment .

    TOKEN_RCB       reduce using rule 43 (statement -> assignment .)
    TOKEN_VOID      reduce using rule 43 (statement -> assignment .)
    TOKEN_STATIC    reduce using rule 43 (statement -> assignment .)
    TOKEN_INT_TYPE  reduce using rule 43 (statement -> assignment .)
    TOKEN_REAL_TYPE reduce using rule 43 (statement -> assignment .)
    TOKEN_BOOL_TYPE reduce using rule 43 (statement -> assignment .)
    TOKEN_STRING_TYPE reduce using rule 43 (statement -> assignment .)
    TOKEN_ID        reduce using rule 43 (statement -> assignment .)
    TOKEN_SEMICOLON reduce using rule 43 (statement -> assignment .)
    TOKEN_INTEGER   reduce using rule 43 (statement -> assignment .)
    TOKEN_REAL      reduce using rule 43 (statement -> assignment .)
    TOKEN_TRUE      reduce using rule 43 (statement -> assignment .)
    TOKEN_FALSE     reduce using rule 43 (statement -> assignment .)
    TOKEN_STRING    reduce using rule 43 (statement -> assignment .)
    TOKEN_LP        reduce using rule 43 (statement -> assignment .)
    TOKEN_PRINT     reduce using rule 43 (statement -> assignment .)
    TOKEN_IF        reduce using rule 43 (statement -> assignment .)
    TOKEN_FOR       reduce using rule 43 (statement -> assignment .)
    TOKEN_WHILE     reduce using rule 43 (statement -> assignment .)
    TOKEN_RETURN    reduce using rule 43 (statement -> assignment .)
    TOKEN_BREAK     reduce using rule 43 (statement -> assignment .)
    TOKEN_CONTINUE  reduce using rule 43 (statement -> assignment .)
    TOKEN_SUBTRACTION reduce using rule 43 (statement -> assignment .)
    TOKEN_NOT       reduce using rule 43 (statement -> assignment .)
    TOKEN_BITWISE_NOT reduce using rule 43 (statement -> assignment .)
    TOKEN_ELSE      reduce using rule 43 (statement -> assignment .)
    TOKEN_ELSEIF    reduce using rule 43 (statement -> assignment .)


state 104

    (44) statement -> print .

    TOKEN_RCB       reduce using rule 44 (statement -> print .)
    TOKEN_VOID      reduce using rule 44 (statement -> print .)
    TOKEN_STATIC    reduce using rule 44 (statement -> print .)
    TOKEN_INT_TYPE  reduce using rule 44 (statement -> print .)
    TOKEN_REAL_TYPE reduce using rule 44 (statement -> print .)
    TOKEN_BOOL_TYPE reduce using rule 44 (statement -> print .)
    TOKEN_STRING_TYPE reduce using rule 44 (statement -> print .)
    TOKEN_ID        reduce using rule 44 (statement -> print .)
    TOKEN_SEMICOLON reduce using rule 44 (statement -> print .)
    TOKEN_INTEGER   reduce using rule 44 (statement -> print .)
    TOKEN_REAL      reduce using rule 44 (statement -> print .)
    TOKEN_TRUE      reduce using rule 44 (statement -> print .)
    TOKEN_FALSE     reduce using rule 44 (statement -> print .)
    TOKEN_STRING    reduce using rule 44 (statement -> print .)
    TOKEN_LP        reduce using rule 44 (statement -> print .)
    TOKEN_PRINT     reduce using rule 44 (statement -> print .)
    TOKEN_IF        reduce using rule 44 (statement -> print .)
    TOKEN_FOR       reduce using rule 44 (statement -> print .)
    TOKEN_WHILE     reduce using rule 44 (statement -> print .)
    TOKEN_RETURN    reduce using rule 44 (statement -> print .)
    TOKEN_BREAK     reduce using rule 44 (statement -> print .)
    TOKEN_CONTINUE  reduce using rule 44 (statement -> print .)
    TOKEN_SUBTRACTION reduce using rule 44 (statement -> print .)
    TOKEN_NOT       reduce using rule 44 (statement -> print .)
    TOKEN_BITWISE_NOT reduce using rule 44 (statement -> print .)
    TOKEN_ELSE      reduce using rule 44 (statement -> print .)
    TOKEN_ELSEIF    reduce using rule 44 (statement -> print .)


state 105

    (45) statement -> statement_var_dec .

    TOKEN_RCB       reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_VOID      reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_STATIC    reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_INT_TYPE  reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_REAL_TYPE reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_BOOL_TYPE reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_STRING_TYPE reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_ID        reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_SEMICOLON reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_INTEGER   reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_REAL      reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_TRUE      reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_FALSE     reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_STRING    reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_LP        reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_PRINT     reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_IF        reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_FOR       reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_WHILE     reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_RETURN    reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_BREAK     reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_CONTINUE  reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_SUBTRACTION reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_NOT       reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_BITWISE_NOT reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_ELSE      reduce using rule 45 (statement -> statement_var_dec .)
    TOKEN_ELSEIF    reduce using rule 45 (statement -> statement_var_dec .)


state 106

    (46) statement -> if .

    TOKEN_RCB       reduce using rule 46 (statement -> if .)
    TOKEN_VOID      reduce using rule 46 (statement -> if .)
    TOKEN_STATIC    reduce using rule 46 (statement -> if .)
    TOKEN_INT_TYPE  reduce using rule 46 (statement -> if .)
    TOKEN_REAL_TYPE reduce using rule 46 (statement -> if .)
    TOKEN_BOOL_TYPE reduce using rule 46 (statement -> if .)
    TOKEN_STRING_TYPE reduce using rule 46 (statement -> if .)
    TOKEN_ID        reduce using rule 46 (statement -> if .)
    TOKEN_SEMICOLON reduce using rule 46 (statement -> if .)
    TOKEN_INTEGER   reduce using rule 46 (statement -> if .)
    TOKEN_REAL      reduce using rule 46 (statement -> if .)
    TOKEN_TRUE      reduce using rule 46 (statement -> if .)
    TOKEN_FALSE     reduce using rule 46 (statement -> if .)
    TOKEN_STRING    reduce using rule 46 (statement -> if .)
    TOKEN_LP        reduce using rule 46 (statement -> if .)
    TOKEN_PRINT     reduce using rule 46 (statement -> if .)
    TOKEN_IF        reduce using rule 46 (statement -> if .)
    TOKEN_FOR       reduce using rule 46 (statement -> if .)
    TOKEN_WHILE     reduce using rule 46 (statement -> if .)
    TOKEN_RETURN    reduce using rule 46 (statement -> if .)
    TOKEN_BREAK     reduce using rule 46 (statement -> if .)
    TOKEN_CONTINUE  reduce using rule 46 (statement -> if .)
    TOKEN_SUBTRACTION reduce using rule 46 (statement -> if .)
    TOKEN_NOT       reduce using rule 46 (statement -> if .)
    TOKEN_BITWISE_NOT reduce using rule 46 (statement -> if .)
    TOKEN_ELSE      reduce using rule 46 (statement -> if .)
    TOKEN_ELSEIF    reduce using rule 46 (statement -> if .)


state 107

    (47) statement -> for .

    TOKEN_RCB       reduce using rule 47 (statement -> for .)
    TOKEN_VOID      reduce using rule 47 (statement -> for .)
    TOKEN_STATIC    reduce using rule 47 (statement -> for .)
    TOKEN_INT_TYPE  reduce using rule 47 (statement -> for .)
    TOKEN_REAL_TYPE reduce using rule 47 (statement -> for .)
    TOKEN_BOOL_TYPE reduce using rule 47 (statement -> for .)
    TOKEN_STRING_TYPE reduce using rule 47 (statement -> for .)
    TOKEN_ID        reduce using rule 47 (statement -> for .)
    TOKEN_SEMICOLON reduce using rule 47 (statement -> for .)
    TOKEN_INTEGER   reduce using rule 47 (statement -> for .)
    TOKEN_REAL      reduce using rule 47 (statement -> for .)
    TOKEN_TRUE      reduce using rule 47 (statement -> for .)
    TOKEN_FALSE     reduce using rule 47 (statement -> for .)
    TOKEN_STRING    reduce using rule 47 (statement -> for .)
    TOKEN_LP        reduce using rule 47 (statement -> for .)
    TOKEN_PRINT     reduce using rule 47 (statement -> for .)
    TOKEN_IF        reduce using rule 47 (statement -> for .)
    TOKEN_FOR       reduce using rule 47 (statement -> for .)
    TOKEN_WHILE     reduce using rule 47 (statement -> for .)
    TOKEN_RETURN    reduce using rule 47 (statement -> for .)
    TOKEN_BREAK     reduce using rule 47 (statement -> for .)
    TOKEN_CONTINUE  reduce using rule 47 (statement -> for .)
    TOKEN_SUBTRACTION reduce using rule 47 (statement -> for .)
    TOKEN_NOT       reduce using rule 47 (statement -> for .)
    TOKEN_BITWISE_NOT reduce using rule 47 (statement -> for .)
    TOKEN_ELSE      reduce using rule 47 (statement -> for .)
    TOKEN_ELSEIF    reduce using rule 47 (statement -> for .)


state 108

    (48) statement -> while .

    TOKEN_RCB       reduce using rule 48 (statement -> while .)
    TOKEN_VOID      reduce using rule 48 (statement -> while .)
    TOKEN_STATIC    reduce using rule 48 (statement -> while .)
    TOKEN_INT_TYPE  reduce using rule 48 (statement -> while .)
    TOKEN_REAL_TYPE reduce using rule 48 (statement -> while .)
    TOKEN_BOOL_TYPE reduce using rule 48 (statement -> while .)
    TOKEN_STRING_TYPE reduce using rule 48 (statement -> while .)
    TOKEN_ID        reduce using rule 48 (statement -> while .)
    TOKEN_SEMICOLON reduce using rule 48 (statement -> while .)
    TOKEN_INTEGER   reduce using rule 48 (statement -> while .)
    TOKEN_REAL      reduce using rule 48 (statement -> while .)
    TOKEN_TRUE      reduce using rule 48 (statement -> while .)
    TOKEN_FALSE     reduce using rule 48 (statement -> while .)
    TOKEN_STRING    reduce using rule 48 (statement -> while .)
    TOKEN_LP        reduce using rule 48 (statement -> while .)
    TOKEN_PRINT     reduce using rule 48 (statement -> while .)
    TOKEN_IF        reduce using rule 48 (statement -> while .)
    TOKEN_FOR       reduce using rule 48 (statement -> while .)
    TOKEN_WHILE     reduce using rule 48 (statement -> while .)
    TOKEN_RETURN    reduce using rule 48 (statement -> while .)
    TOKEN_BREAK     reduce using rule 48 (statement -> while .)
    TOKEN_CONTINUE  reduce using rule 48 (statement -> while .)
    TOKEN_SUBTRACTION reduce using rule 48 (statement -> while .)
    TOKEN_NOT       reduce using rule 48 (statement -> while .)
    TOKEN_BITWISE_NOT reduce using rule 48 (statement -> while .)
    TOKEN_ELSE      reduce using rule 48 (statement -> while .)
    TOKEN_ELSEIF    reduce using rule 48 (statement -> while .)


state 109

    (49) statement -> return .

    TOKEN_RCB       reduce using rule 49 (statement -> return .)
    TOKEN_VOID      reduce using rule 49 (statement -> return .)
    TOKEN_STATIC    reduce using rule 49 (statement -> return .)
    TOKEN_INT_TYPE  reduce using rule 49 (statement -> return .)
    TOKEN_REAL_TYPE reduce using rule 49 (statement -> return .)
    TOKEN_BOOL_TYPE reduce using rule 49 (statement -> return .)
    TOKEN_STRING_TYPE reduce using rule 49 (statement -> return .)
    TOKEN_ID        reduce using rule 49 (statement -> return .)
    TOKEN_SEMICOLON reduce using rule 49 (statement -> return .)
    TOKEN_INTEGER   reduce using rule 49 (statement -> return .)
    TOKEN_REAL      reduce using rule 49 (statement -> return .)
    TOKEN_TRUE      reduce using rule 49 (statement -> return .)
    TOKEN_FALSE     reduce using rule 49 (statement -> return .)
    TOKEN_STRING    reduce using rule 49 (statement -> return .)
    TOKEN_LP        reduce using rule 49 (statement -> return .)
    TOKEN_PRINT     reduce using rule 49 (statement -> return .)
    TOKEN_IF        reduce using rule 49 (statement -> return .)
    TOKEN_FOR       reduce using rule 49 (statement -> return .)
    TOKEN_WHILE     reduce using rule 49 (statement -> return .)
    TOKEN_RETURN    reduce using rule 49 (statement -> return .)
    TOKEN_BREAK     reduce using rule 49 (statement -> return .)
    TOKEN_CONTINUE  reduce using rule 49 (statement -> return .)
    TOKEN_SUBTRACTION reduce using rule 49 (statement -> return .)
    TOKEN_NOT       reduce using rule 49 (statement -> return .)
    TOKEN_BITWISE_NOT reduce using rule 49 (statement -> return .)
    TOKEN_ELSE      reduce using rule 49 (statement -> return .)
    TOKEN_ELSEIF    reduce using rule 49 (statement -> return .)


state 110

    (50) statement -> break .

    TOKEN_RCB       reduce using rule 50 (statement -> break .)
    TOKEN_VOID      reduce using rule 50 (statement -> break .)
    TOKEN_STATIC    reduce using rule 50 (statement -> break .)
    TOKEN_INT_TYPE  reduce using rule 50 (statement -> break .)
    TOKEN_REAL_TYPE reduce using rule 50 (statement -> break .)
    TOKEN_BOOL_TYPE reduce using rule 50 (statement -> break .)
    TOKEN_STRING_TYPE reduce using rule 50 (statement -> break .)
    TOKEN_ID        reduce using rule 50 (statement -> break .)
    TOKEN_SEMICOLON reduce using rule 50 (statement -> break .)
    TOKEN_INTEGER   reduce using rule 50 (statement -> break .)
    TOKEN_REAL      reduce using rule 50 (statement -> break .)
    TOKEN_TRUE      reduce using rule 50 (statement -> break .)
    TOKEN_FALSE     reduce using rule 50 (statement -> break .)
    TOKEN_STRING    reduce using rule 50 (statement -> break .)
    TOKEN_LP        reduce using rule 50 (statement -> break .)
    TOKEN_PRINT     reduce using rule 50 (statement -> break .)
    TOKEN_IF        reduce using rule 50 (statement -> break .)
    TOKEN_FOR       reduce using rule 50 (statement -> break .)
    TOKEN_WHILE     reduce using rule 50 (statement -> break .)
    TOKEN_RETURN    reduce using rule 50 (statement -> break .)
    TOKEN_BREAK     reduce using rule 50 (statement -> break .)
    TOKEN_CONTINUE  reduce using rule 50 (statement -> break .)
    TOKEN_SUBTRACTION reduce using rule 50 (statement -> break .)
    TOKEN_NOT       reduce using rule 50 (statement -> break .)
    TOKEN_BITWISE_NOT reduce using rule 50 (statement -> break .)
    TOKEN_ELSE      reduce using rule 50 (statement -> break .)
    TOKEN_ELSEIF    reduce using rule 50 (statement -> break .)


state 111

    (51) statement -> continue .

    TOKEN_RCB       reduce using rule 51 (statement -> continue .)
    TOKEN_VOID      reduce using rule 51 (statement -> continue .)
    TOKEN_STATIC    reduce using rule 51 (statement -> continue .)
    TOKEN_INT_TYPE  reduce using rule 51 (statement -> continue .)
    TOKEN_REAL_TYPE reduce using rule 51 (statement -> continue .)
    TOKEN_BOOL_TYPE reduce using rule 51 (statement -> continue .)
    TOKEN_STRING_TYPE reduce using rule 51 (statement -> continue .)
    TOKEN_ID        reduce using rule 51 (statement -> continue .)
    TOKEN_SEMICOLON reduce using rule 51 (statement -> continue .)
    TOKEN_INTEGER   reduce using rule 51 (statement -> continue .)
    TOKEN_REAL      reduce using rule 51 (statement -> continue .)
    TOKEN_TRUE      reduce using rule 51 (statement -> continue .)
    TOKEN_FALSE     reduce using rule 51 (statement -> continue .)
    TOKEN_STRING    reduce using rule 51 (statement -> continue .)
    TOKEN_LP        reduce using rule 51 (statement -> continue .)
    TOKEN_PRINT     reduce using rule 51 (statement -> continue .)
    TOKEN_IF        reduce using rule 51 (statement -> continue .)
    TOKEN_FOR       reduce using rule 51 (statement -> continue .)
    TOKEN_WHILE     reduce using rule 51 (statement -> continue .)
    TOKEN_RETURN    reduce using rule 51 (statement -> continue .)
    TOKEN_BREAK     reduce using rule 51 (statement -> continue .)
    TOKEN_CONTINUE  reduce using rule 51 (statement -> continue .)
    TOKEN_SUBTRACTION reduce using rule 51 (statement -> continue .)
    TOKEN_NOT       reduce using rule 51 (statement -> continue .)
    TOKEN_BITWISE_NOT reduce using rule 51 (statement -> continue .)
    TOKEN_ELSE      reduce using rule 51 (statement -> continue .)
    TOKEN_ELSEIF    reduce using rule 51 (statement -> continue .)


state 112

    (77) exp -> lvalue .
    (52) assignment -> lvalue . TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON

    TOKEN_SEMICOLON reduce using rule 77 (exp -> lvalue .)
    TOKEN_ADDITION  reduce using rule 77 (exp -> lvalue .)
    TOKEN_SUBTRACTION reduce using rule 77 (exp -> lvalue .)
    TOKEN_MULTIPLICATION reduce using rule 77 (exp -> lvalue .)
    TOKEN_DIVISION  reduce using rule 77 (exp -> lvalue .)
    TOKEN_MODULO    reduce using rule 77 (exp -> lvalue .)
    TOKEN_POWER     reduce using rule 77 (exp -> lvalue .)
    TOKEN_SHIFT_LEFT reduce using rule 77 (exp -> lvalue .)
    TOKEN_SHIFT_RIGHT reduce using rule 77 (exp -> lvalue .)
    TOKEN_AND       reduce using rule 77 (exp -> lvalue .)
    TOKEN_OR        reduce using rule 77 (exp -> lvalue .)
    TOKEN_LT        reduce using rule 77 (exp -> lvalue .)
    TOKEN_LE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_GT        reduce using rule 77 (exp -> lvalue .)
    TOKEN_GE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_EQ        reduce using rule 77 (exp -> lvalue .)
    TOKEN_NE        reduce using rule 77 (exp -> lvalue .)
    TOKEN_BITWISE_AND reduce using rule 77 (exp -> lvalue .)
    TOKEN_BITWISE_OR reduce using rule 77 (exp -> lvalue .)
    TOKEN_ASSIGNMENT shift and go to state 148


state 113

    (57) print -> TOKEN_PRINT . TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON

    TOKEN_LP        shift and go to state 149


state 114

    (58) statement_var_dec -> return_type . var_list TOKEN_SEMICOLON
    (22) var_list -> . var_list TOKEN_COMMA var_list_item
    (23) var_list -> . var_list_item
    (25) var_list_item -> . item1
    (26) var_list_item -> . TOKEN_ID
    (24) item1 -> . TOKEN_ID TOKEN_ASSIGNMENT exp

    TOKEN_ID        shift and go to state 43

    var_list                       shift and go to state 150
    var_list_item                  shift and go to state 29
    item1                          shift and go to state 31

state 115

    (59) statement_var_dec -> lvalue1 . var_list TOKEN_SEMICOLON
    (53) lvalue -> lvalue1 .
    (22) var_list -> . var_list TOKEN_COMMA var_list_item
    (23) var_list -> . var_list_item
    (25) var_list_item -> . item1
    (26) var_list_item -> . TOKEN_ID
    (24) item1 -> . TOKEN_ID TOKEN_ASSIGNMENT exp

    TOKEN_ASSIGNMENT reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SEMICOLON reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_ADDITION  reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SUBTRACTION reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_MULTIPLICATION reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_DIVISION  reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_MODULO    reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_POWER     reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SHIFT_LEFT reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_SHIFT_RIGHT reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_AND       reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_OR        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_LT        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_LE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_GT        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_GE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_EQ        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_NE        reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_BITWISE_AND reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_BITWISE_OR reduce using rule 53 (lvalue -> lvalue1 .)
    TOKEN_ID        shift and go to state 43

    var_list                       shift and go to state 151
    var_list_item                  shift and go to state 29
    item1                          shift and go to state 31

state 116

    (60) if -> TOKEN_IF . TOKEN_LP exp TOKEN_RP block
    (61) if -> TOKEN_IF . TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> TOKEN_IF . TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> TOKEN_IF . TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block

    TOKEN_LP        shift and go to state 152


state 117

    (67) for -> TOKEN_FOR . TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block

    TOKEN_LP        shift and go to state 153


state 118

    (68) while -> TOKEN_WHILE . TOKEN_LP exp TOKEN_RP block

    TOKEN_LP        shift and go to state 154


state 119

    (69) return -> TOKEN_RETURN . exp TOKEN_SEMICOLON
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 155
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 120

    (70) break -> TOKEN_BREAK . TOKEN_SEMICOLON

    TOKEN_SEMICOLON shift and go to state 156


state 121

    (71) continue -> TOKEN_CONTINUE . TOKEN_SEMICOLON

    TOKEN_SEMICOLON shift and go to state 157


state 122

    (33) formal_arguments_list -> formal_arguments_list TOKEN_COMMA formal_argument .

    TOKEN_COMMA     reduce using rule 33 (formal_arguments_list -> formal_arguments_list TOKEN_COMMA formal_argument .)
    TOKEN_RP        reduce using rule 33 (formal_arguments_list -> formal_arguments_list TOKEN_COMMA formal_argument .)


state 123

    (107) function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID . function_call_body
    (55) lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .
    (108) function_call_body -> . TOKEN_LP actual_arguments TOKEN_RP

    TOKEN_ADDITION  reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_SUBTRACTION reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_MULTIPLICATION reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_DIVISION  reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_MODULO    reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_POWER     reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_SHIFT_LEFT reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_SHIFT_RIGHT reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_AND       reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_OR        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_LT        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_LE        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_GT        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_GE        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_EQ        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_NE        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_BITWISE_AND reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_BITWISE_OR reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_SEMICOLON reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_COMMA     reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_RP        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_TO        reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_STEPS     reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_ASSIGNMENT reduce using rule 55 (lvalue2 -> TOKEN_ID TOKEN_DOT TOKEN_ID .)
    TOKEN_LP        shift and go to state 75

    function_call_body             shift and go to state 158

state 124

    (108) function_call_body -> TOKEN_LP actual_arguments . TOKEN_RP

    TOKEN_RP        shift and go to state 159


state 125

    (109) actual_arguments -> actual_arguments_list .
    (111) actual_arguments_list -> actual_arguments_list . TOKEN_COMMA exp

    TOKEN_RP        reduce using rule 109 (actual_arguments -> actual_arguments_list .)
    TOKEN_COMMA     shift and go to state 160


state 126

    (112) actual_arguments_list -> exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_COMMA     reduce using rule 112 (actual_arguments_list -> exp .)
    TOKEN_RP        reduce using rule 112 (actual_arguments_list -> exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 127

    (85) binary_operation -> exp TOKEN_ADDITION exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_SUBTRACTION reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_SHIFT_LEFT reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_AND       reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_OR        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_LT        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_LE        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_GT        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_GE        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_EQ        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_NE        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_BITWISE_AND reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_BITWISE_OR reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_SEMICOLON reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_COMMA     reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_RP        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_TO        reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_STEPS     reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .)
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_MULTIPLICATION [ reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .) ]
  ! TOKEN_POWER     [ reduce using rule 85 (binary_operation -> exp TOKEN_ADDITION exp .) ]
  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 128

    (86) binary_operation -> exp TOKEN_SUBTRACTION exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_SUBTRACTION reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_SHIFT_LEFT reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_AND       reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_OR        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_LT        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_LE        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_GT        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_GE        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_EQ        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_NE        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_BITWISE_AND reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_BITWISE_OR reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_SEMICOLON reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_COMMA     reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_RP        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_TO        reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_STEPS     reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .)
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_MULTIPLICATION [ reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .) ]
  ! TOKEN_POWER     [ reduce using rule 86 (binary_operation -> exp TOKEN_SUBTRACTION exp .) ]
  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 129

    (87) binary_operation -> exp TOKEN_MULTIPLICATION exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_SUBTRACTION reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_MULTIPLICATION reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_DIVISION  reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_SHIFT_LEFT reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_AND       reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_OR        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_LT        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_LE        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_GT        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_GE        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_EQ        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_NE        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_BITWISE_AND reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_BITWISE_OR reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_SEMICOLON reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_COMMA     reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_RP        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_TO        reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_STEPS     reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .)
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_MODULO    [ reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .) ]
  ! TOKEN_POWER     [ reduce using rule 87 (binary_operation -> exp TOKEN_MULTIPLICATION exp .) ]
  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_MULTIPLICATION [ shift and go to state 78 ]
  ! TOKEN_DIVISION  [ shift and go to state 79 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 130

    (88) binary_operation -> exp TOKEN_DIVISION exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_SUBTRACTION reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_MULTIPLICATION reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_DIVISION  reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_SHIFT_LEFT reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_AND       reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_OR        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_LT        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_LE        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_GT        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_GE        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_EQ        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_NE        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_BITWISE_AND reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_BITWISE_OR reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_SEMICOLON reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_COMMA     reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_RP        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_TO        reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_STEPS     reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .)
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_MODULO    [ reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .) ]
  ! TOKEN_POWER     [ reduce using rule 88 (binary_operation -> exp TOKEN_DIVISION exp .) ]
  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_MULTIPLICATION [ shift and go to state 78 ]
  ! TOKEN_DIVISION  [ shift and go to state 79 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 131

    (89) binary_operation -> exp TOKEN_MODULO exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_SUBTRACTION reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_MULTIPLICATION reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_DIVISION  reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_MODULO    reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_POWER     reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_SHIFT_LEFT reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_AND       reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_OR        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_LT        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_LE        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_GT        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_GE        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_EQ        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_NE        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_BITWISE_AND reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_BITWISE_OR reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_SEMICOLON reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_COMMA     reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_RP        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_TO        reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)
    TOKEN_STEPS     reduce using rule 89 (binary_operation -> exp TOKEN_MODULO exp .)

  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_MULTIPLICATION [ shift and go to state 78 ]
  ! TOKEN_DIVISION  [ shift and go to state 79 ]
  ! TOKEN_MODULO    [ shift and go to state 80 ]
  ! TOKEN_POWER     [ shift and go to state 81 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 132

    (90) binary_operation -> exp TOKEN_POWER exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_ADDITION  reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_SUBTRACTION reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_MULTIPLICATION reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_DIVISION  reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_POWER     reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_SHIFT_LEFT reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_AND       reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_OR        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_LT        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_LE        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_GT        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_GE        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_EQ        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_NE        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_BITWISE_AND reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_BITWISE_OR reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_SEMICOLON reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_COMMA     reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_RP        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_TO        reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_STEPS     reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .)
    TOKEN_MODULO    shift and go to state 80

  ! TOKEN_MODULO    [ reduce using rule 90 (binary_operation -> exp TOKEN_POWER exp .) ]
  ! TOKEN_ADDITION  [ shift and go to state 76 ]
  ! TOKEN_SUBTRACTION [ shift and go to state 77 ]
  ! TOKEN_MULTIPLICATION [ shift and go to state 78 ]
  ! TOKEN_DIVISION  [ shift and go to state 79 ]
  ! TOKEN_POWER     [ shift and go to state 81 ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 133

    (91) binary_operation -> exp TOKEN_SHIFT_LEFT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_AND       reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_OR        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_LT        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_LE        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_GT        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_GE        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_EQ        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_NE        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_BITWISE_AND reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_BITWISE_OR reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_SEMICOLON reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_COMMA     reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_RP        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_TO        reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_STEPS     reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_ADDITION  [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 91 (binary_operation -> exp TOKEN_SHIFT_LEFT exp .) ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 134

    (92) binary_operation -> exp TOKEN_SHIFT_RIGHT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_SHIFT_RIGHT reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_AND       reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_OR        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_LT        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_LE        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_GT        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_GE        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_EQ        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_NE        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_BITWISE_AND reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_BITWISE_OR reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_SEMICOLON reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_COMMA     reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_RP        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_TO        reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_STEPS     reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81

  ! TOKEN_ADDITION  [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 92 (binary_operation -> exp TOKEN_SHIFT_RIGHT exp .) ]
  ! TOKEN_SHIFT_LEFT [ shift and go to state 82 ]
  ! TOKEN_SHIFT_RIGHT [ shift and go to state 83 ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 135

    (93) logical_operation -> exp TOKEN_AND exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_OR        reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_SEMICOLON reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_COMMA     reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_RP        reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_TO        reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_STEPS     reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93

  ! TOKEN_ADDITION  [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_POWER     [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_LT        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_LE        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_GT        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_GE        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_EQ        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_NE        [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_BITWISE_AND [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_BITWISE_OR [ reduce using rule 93 (logical_operation -> exp TOKEN_AND exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]


state 136

    (94) logical_operation -> exp TOKEN_OR exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_OR        reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_SEMICOLON reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_COMMA     reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_RP        reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_TO        reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_STEPS     reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93

  ! TOKEN_ADDITION  [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_POWER     [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_AND       [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_LT        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_LE        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_GT        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_GE        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_EQ        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_NE        [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_BITWISE_AND [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_BITWISE_OR [ reduce using rule 94 (logical_operation -> exp TOKEN_OR exp .) ]
  ! TOKEN_OR        [ shift and go to state 85 ]


state 137

    (95) comparison_operation -> exp TOKEN_LT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_OR        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_LT        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_LE        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_GT        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_GE        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_EQ        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_NE        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_BITWISE_AND reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_BITWISE_OR reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_SEMICOLON reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_COMMA     reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_RP        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_TO        reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_STEPS     reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 95 (comparison_operation -> exp TOKEN_LT exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 138

    (96) comparison_operation -> exp TOKEN_LE exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_OR        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_LT        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_LE        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_GT        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_GE        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_EQ        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_NE        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_BITWISE_AND reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_BITWISE_OR reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_SEMICOLON reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_COMMA     reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_RP        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_TO        reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_STEPS     reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_POWER     [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 96 (comparison_operation -> exp TOKEN_LE exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 139

    (97) comparison_operation -> exp TOKEN_GT exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_OR        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_LT        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_LE        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_GT        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_GE        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_EQ        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_NE        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_BITWISE_AND reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_BITWISE_OR reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_SEMICOLON reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_COMMA     reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_RP        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_TO        reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_STEPS     reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_POWER     [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 97 (comparison_operation -> exp TOKEN_GT exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 140

    (98) comparison_operation -> exp TOKEN_GE exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_OR        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_LT        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_LE        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_GT        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_GE        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_EQ        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_NE        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_BITWISE_AND reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_BITWISE_OR reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_SEMICOLON reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_COMMA     reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_RP        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_TO        reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_STEPS     reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_POWER     [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 98 (comparison_operation -> exp TOKEN_GE exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 141

    (99) comparison_operation -> exp TOKEN_EQ exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_OR        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_LT        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_LE        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_GT        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_GE        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_EQ        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_NE        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_BITWISE_AND reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_BITWISE_OR reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_SEMICOLON reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_COMMA     reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_RP        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_TO        reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_STEPS     reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_POWER     [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 99 (comparison_operation -> exp TOKEN_EQ exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 142

    (100) comparison_operation -> exp TOKEN_NE exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_OR        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_LT        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_LE        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_GT        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_GE        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_EQ        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_NE        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_BITWISE_AND reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_BITWISE_OR reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_SEMICOLON reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_COMMA     reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_RP        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_TO        reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_STEPS     reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83

  ! TOKEN_ADDITION  [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_POWER     [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 100 (comparison_operation -> exp TOKEN_NE exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_LT        [ shift and go to state 86 ]
  ! TOKEN_LE        [ shift and go to state 87 ]
  ! TOKEN_GT        [ shift and go to state 88 ]
  ! TOKEN_GE        [ shift and go to state 89 ]
  ! TOKEN_EQ        [ shift and go to state 90 ]
  ! TOKEN_NE        [ shift and go to state 91 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 143

    (101) bitwise_operation -> exp TOKEN_BITWISE_AND exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_OR        reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_BITWISE_AND reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_BITWISE_OR reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_SEMICOLON reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_COMMA     reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_RP        reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_TO        reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_STEPS     reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91

  ! TOKEN_ADDITION  [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_POWER     [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_LT        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_LE        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_GT        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_GE        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_EQ        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_NE        [ reduce using rule 101 (bitwise_operation -> exp TOKEN_BITWISE_AND exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_BITWISE_AND [ shift and go to state 92 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 144

    (102) bitwise_operation -> exp TOKEN_BITWISE_OR exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_AND       reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_OR        reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_BITWISE_OR reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_SEMICOLON reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_COMMA     reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_RP        reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_TO        reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_STEPS     reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92

  ! TOKEN_ADDITION  [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_SUBTRACTION [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_MULTIPLICATION [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_DIVISION  [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_MODULO    [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_POWER     [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_SHIFT_LEFT [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_SHIFT_RIGHT [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_LT        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_LE        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_GT        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_GE        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_EQ        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_NE        [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_BITWISE_AND [ reduce using rule 102 (bitwise_operation -> exp TOKEN_BITWISE_OR exp .) ]
  ! TOKEN_AND       [ shift and go to state 84 ]
  ! TOKEN_OR        [ shift and go to state 85 ]
  ! TOKEN_BITWISE_OR [ shift and go to state 93 ]


state 145

    (83) exp -> TOKEN_LP exp TOKEN_RP .

    TOKEN_ADDITION  reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_SUBTRACTION reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_MULTIPLICATION reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_DIVISION  reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_MODULO    reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_POWER     reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_SHIFT_LEFT reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_SHIFT_RIGHT reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_AND       reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_OR        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_LT        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_LE        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_GT        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_GE        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_EQ        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_NE        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_BITWISE_AND reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_BITWISE_OR reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_SEMICOLON reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_COMMA     reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_RP        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_TO        reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)
    TOKEN_STEPS     reduce using rule 83 (exp -> TOKEN_LP exp TOKEN_RP .)


state 146

    (37) block -> TOKEN_LCB statements_list . TOKEN_RCB
    (39) statements_list -> statements_list . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_RCB       shift and go to state 161
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    statement                      shift and go to state 162
    exp                            shift and go to state 102
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 147

    (42) statement -> exp TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 42 (statement -> exp TOKEN_SEMICOLON .)


state 148

    (52) assignment -> lvalue TOKEN_ASSIGNMENT . exp TOKEN_SEMICOLON
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    lvalue                         shift and go to state 56
    exp                            shift and go to state 163
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 149

    (57) print -> TOKEN_PRINT TOKEN_LP . TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON

    TOKEN_STRING    shift and go to state 164


state 150

    (58) statement_var_dec -> return_type var_list . TOKEN_SEMICOLON
    (22) var_list -> var_list . TOKEN_COMMA var_list_item

    TOKEN_SEMICOLON shift and go to state 165
    TOKEN_COMMA     shift and go to state 38


state 151

    (59) statement_var_dec -> lvalue1 var_list . TOKEN_SEMICOLON
    (22) var_list -> var_list . TOKEN_COMMA var_list_item

    TOKEN_SEMICOLON shift and go to state 166
    TOKEN_COMMA     shift and go to state 38


state 152

    (60) if -> TOKEN_IF TOKEN_LP . exp TOKEN_RP block
    (61) if -> TOKEN_IF TOKEN_LP . exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> TOKEN_IF TOKEN_LP . exp TOKEN_RP block elseifs
    (63) if -> TOKEN_IF TOKEN_LP . exp TOKEN_RP block elseifs TOKEN_ELSE block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 167
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 153

    (67) for -> TOKEN_FOR TOKEN_LP . TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block

    TOKEN_ID        shift and go to state 168


state 154

    (68) while -> TOKEN_WHILE TOKEN_LP . exp TOKEN_RP block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 169
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 155

    (69) return -> TOKEN_RETURN exp . TOKEN_SEMICOLON
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON shift and go to state 170
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 156

    (70) break -> TOKEN_BREAK TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 70 (break -> TOKEN_BREAK TOKEN_SEMICOLON .)


state 157

    (71) continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 71 (continue -> TOKEN_CONTINUE TOKEN_SEMICOLON .)


state 158

    (107) function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .

    TOKEN_ADDITION  reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_SUBTRACTION reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_MULTIPLICATION reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_DIVISION  reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_MODULO    reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_POWER     reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_SHIFT_LEFT reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_SHIFT_RIGHT reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_AND       reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_OR        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_LT        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_LE        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_GT        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_GE        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_EQ        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_NE        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_BITWISE_AND reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_BITWISE_OR reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_SEMICOLON reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_COMMA     reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_RP        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_TO        reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)
    TOKEN_STEPS     reduce using rule 107 (function_call -> TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .)


state 159

    (108) function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .

    TOKEN_ADDITION  reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_SUBTRACTION reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_MULTIPLICATION reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_DIVISION  reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_MODULO    reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_POWER     reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_SHIFT_LEFT reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_SHIFT_RIGHT reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_AND       reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_OR        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_LT        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_LE        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_GT        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_GE        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_EQ        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_NE        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_BITWISE_AND reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_BITWISE_OR reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_SEMICOLON reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_COMMA     reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_RP        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_TO        reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)
    TOKEN_STEPS     reduce using rule 108 (function_call_body -> TOKEN_LP actual_arguments TOKEN_RP .)


state 160

    (111) actual_arguments_list -> actual_arguments_list TOKEN_COMMA . exp
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 171
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 161

    (37) block -> TOKEN_LCB statements_list TOKEN_RCB .

    TOKEN_RCB       reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_VOID      reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_STATIC    reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_INT_TYPE  reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_REAL_TYPE reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_BOOL_TYPE reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_STRING_TYPE reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_ID        reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_ELSE      reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_ELSEIF    reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_SEMICOLON reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_INTEGER   reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_REAL      reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_TRUE      reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_FALSE     reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_STRING    reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_LP        reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_PRINT     reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_IF        reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_FOR       reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_WHILE     reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_RETURN    reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_BREAK     reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_CONTINUE  reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_SUBTRACTION reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_NOT       reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)
    TOKEN_BITWISE_NOT reduce using rule 37 (block -> TOKEN_LCB statements_list TOKEN_RCB .)


state 162

    (39) statements_list -> statements_list statement .

    TOKEN_RCB       reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_SEMICOLON reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_INTEGER   reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_REAL      reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_TRUE      reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_FALSE     reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_STRING    reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_LP        reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_PRINT     reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_IF        reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_FOR       reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_WHILE     reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_RETURN    reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_BREAK     reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_CONTINUE  reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_SUBTRACTION reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_NOT       reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_BITWISE_NOT reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_ID        reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_INT_TYPE  reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_REAL_TYPE reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_BOOL_TYPE reduce using rule 39 (statements_list -> statements_list statement .)
    TOKEN_STRING_TYPE reduce using rule 39 (statements_list -> statements_list statement .)


state 163

    (52) assignment -> lvalue TOKEN_ASSIGNMENT exp . TOKEN_SEMICOLON
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON shift and go to state 172
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 164

    (57) print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING . TOKEN_RP TOKEN_SEMICOLON

    TOKEN_RP        shift and go to state 173


state 165

    (58) statement_var_dec -> return_type var_list TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 58 (statement_var_dec -> return_type var_list TOKEN_SEMICOLON .)


state 166

    (59) statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 59 (statement_var_dec -> lvalue1 var_list TOKEN_SEMICOLON .)


state 167

    (60) if -> TOKEN_IF TOKEN_LP exp . TOKEN_RP block
    (61) if -> TOKEN_IF TOKEN_LP exp . TOKEN_RP block TOKEN_ELSE block
    (62) if -> TOKEN_IF TOKEN_LP exp . TOKEN_RP block elseifs
    (63) if -> TOKEN_IF TOKEN_LP exp . TOKEN_RP block elseifs TOKEN_ELSE block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_RP        shift and go to state 174
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 168

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID . TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block

    TOKEN_IN        shift and go to state 175


state 169

    (68) while -> TOKEN_WHILE TOKEN_LP exp . TOKEN_RP block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_RP        shift and go to state 176
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 170

    (69) return -> TOKEN_RETURN exp TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 69 (return -> TOKEN_RETURN exp TOKEN_SEMICOLON .)


state 171

    (111) actual_arguments_list -> actual_arguments_list TOKEN_COMMA exp .
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_COMMA     reduce using rule 111 (actual_arguments_list -> actual_arguments_list TOKEN_COMMA exp .)
    TOKEN_RP        reduce using rule 111 (actual_arguments_list -> actual_arguments_list TOKEN_COMMA exp .)
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 172

    (52) assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 52 (assignment -> lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .)


state 173

    (57) print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP . TOKEN_SEMICOLON

    TOKEN_SEMICOLON shift and go to state 177


state 174

    (60) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP . block
    (61) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP . block TOKEN_ELSE block
    (62) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP . block elseifs
    (63) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP . block elseifs TOKEN_ELSE block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 178
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 175

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN . exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 179
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 176

    (68) while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 180
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 177

    (57) print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .

    TOKEN_RCB       reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_VOID      reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_STATIC    reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_INT_TYPE  reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_REAL_TYPE reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_BOOL_TYPE reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_STRING_TYPE reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_ID        reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_SEMICOLON reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_INTEGER   reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_REAL      reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_TRUE      reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_FALSE     reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_STRING    reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_LP        reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_PRINT     reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_IF        reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_FOR       reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_WHILE     reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_RETURN    reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_BREAK     reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_CONTINUE  reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_SUBTRACTION reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_NOT       reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_BITWISE_NOT reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_ELSE      reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)
    TOKEN_ELSEIF    reduce using rule 57 (print -> TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON .)


state 178

    (60) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .
    (61) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block . TOKEN_ELSE block
    (62) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block . elseifs
    (63) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block . elseifs TOKEN_ELSE block
    (64) elseifs -> . elseifs elseif
    (65) elseifs -> . elseif
    (66) elseif -> . TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block

    TOKEN_RCB       reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_VOID      reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STATIC    reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INT_TYPE  reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL_TYPE reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BOOL_TYPE reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING_TYPE reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ID        reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SEMICOLON reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INTEGER   reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL      reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_TRUE      reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FALSE     reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING    reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_LP        reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_PRINT     reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_IF        reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FOR       reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_WHILE     reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_RETURN    reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BREAK     reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_CONTINUE  reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SUBTRACTION reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_NOT       reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BITWISE_NOT reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ELSE      shift and go to state 181
    TOKEN_ELSEIF    shift and go to state 184

  ! TOKEN_ELSE      [ reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .) ]
  ! TOKEN_ELSEIF    [ reduce using rule 60 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block .) ]

    elseifs                        shift and go to state 182
    elseif                         shift and go to state 183

state 179

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp . TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_TO        shift and go to state 185
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 180

    (68) while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .

    TOKEN_RCB       reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_VOID      reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STATIC    reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INT_TYPE  reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL_TYPE reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BOOL_TYPE reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING_TYPE reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ID        reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SEMICOLON reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INTEGER   reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL      reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_TRUE      reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FALSE     reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING    reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_LP        reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_PRINT     reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_IF        reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FOR       reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_WHILE     reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_RETURN    reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BREAK     reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_CONTINUE  reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SUBTRACTION reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_NOT       reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BITWISE_NOT reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ELSE      reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ELSEIF    reduce using rule 68 (while -> TOKEN_WHILE TOKEN_LP exp TOKEN_RP block .)


state 181

    (61) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 186
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 182

    (62) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .
    (63) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs . TOKEN_ELSE block
    (64) elseifs -> elseifs . elseif
    (66) elseif -> . TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block

    TOKEN_RCB       reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_VOID      reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_STATIC    reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_INT_TYPE  reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_REAL_TYPE reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_BOOL_TYPE reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_STRING_TYPE reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_ID        reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_SEMICOLON reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_INTEGER   reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_REAL      reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_TRUE      reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_FALSE     reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_STRING    reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_LP        reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_PRINT     reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_IF        reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_FOR       reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_WHILE     reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_RETURN    reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_BREAK     reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_CONTINUE  reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_SUBTRACTION reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_NOT       reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_BITWISE_NOT reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_ELSEIF    reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .)
    TOKEN_ELSE      shift and go to state 187

  ! TOKEN_ELSE      [ reduce using rule 62 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs .) ]
  ! TOKEN_ELSEIF    [ shift and go to state 184 ]

    elseif                         shift and go to state 188

state 183

    (65) elseifs -> elseif .

    TOKEN_ELSE      reduce using rule 65 (elseifs -> elseif .)
    TOKEN_ELSEIF    reduce using rule 65 (elseifs -> elseif .)
    TOKEN_RCB       reduce using rule 65 (elseifs -> elseif .)
    TOKEN_VOID      reduce using rule 65 (elseifs -> elseif .)
    TOKEN_STATIC    reduce using rule 65 (elseifs -> elseif .)
    TOKEN_INT_TYPE  reduce using rule 65 (elseifs -> elseif .)
    TOKEN_REAL_TYPE reduce using rule 65 (elseifs -> elseif .)
    TOKEN_BOOL_TYPE reduce using rule 65 (elseifs -> elseif .)
    TOKEN_STRING_TYPE reduce using rule 65 (elseifs -> elseif .)
    TOKEN_ID        reduce using rule 65 (elseifs -> elseif .)
    TOKEN_SEMICOLON reduce using rule 65 (elseifs -> elseif .)
    TOKEN_INTEGER   reduce using rule 65 (elseifs -> elseif .)
    TOKEN_REAL      reduce using rule 65 (elseifs -> elseif .)
    TOKEN_TRUE      reduce using rule 65 (elseifs -> elseif .)
    TOKEN_FALSE     reduce using rule 65 (elseifs -> elseif .)
    TOKEN_STRING    reduce using rule 65 (elseifs -> elseif .)
    TOKEN_LP        reduce using rule 65 (elseifs -> elseif .)
    TOKEN_PRINT     reduce using rule 65 (elseifs -> elseif .)
    TOKEN_IF        reduce using rule 65 (elseifs -> elseif .)
    TOKEN_FOR       reduce using rule 65 (elseifs -> elseif .)
    TOKEN_WHILE     reduce using rule 65 (elseifs -> elseif .)
    TOKEN_RETURN    reduce using rule 65 (elseifs -> elseif .)
    TOKEN_BREAK     reduce using rule 65 (elseifs -> elseif .)
    TOKEN_CONTINUE  reduce using rule 65 (elseifs -> elseif .)
    TOKEN_SUBTRACTION reduce using rule 65 (elseifs -> elseif .)
    TOKEN_NOT       reduce using rule 65 (elseifs -> elseif .)
    TOKEN_BITWISE_NOT reduce using rule 65 (elseifs -> elseif .)


state 184

    (66) elseif -> TOKEN_ELSEIF . TOKEN_LP exp TOKEN_RP block

    TOKEN_LP        shift and go to state 189


state 185

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO . exp TOKEN_STEPS exp TOKEN_RP block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 190
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 186

    (61) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .

    TOKEN_RCB       reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_VOID      reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_STATIC    reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_INT_TYPE  reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_REAL_TYPE reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_BOOL_TYPE reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_STRING_TYPE reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_ID        reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_SEMICOLON reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_INTEGER   reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_REAL      reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_TRUE      reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_FALSE     reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_STRING    reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_LP        reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_PRINT     reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_IF        reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_FOR       reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_WHILE     reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_RETURN    reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_BREAK     reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_CONTINUE  reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_SUBTRACTION reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_NOT       reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_BITWISE_NOT reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_ELSE      reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)
    TOKEN_ELSEIF    reduce using rule 61 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block .)


state 187

    (63) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 191
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 188

    (64) elseifs -> elseifs elseif .

    TOKEN_ELSE      reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_ELSEIF    reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_RCB       reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_VOID      reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_STATIC    reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_INT_TYPE  reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_REAL_TYPE reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_BOOL_TYPE reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_STRING_TYPE reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_ID        reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_SEMICOLON reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_INTEGER   reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_REAL      reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_TRUE      reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_FALSE     reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_STRING    reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_LP        reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_PRINT     reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_IF        reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_FOR       reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_WHILE     reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_RETURN    reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_BREAK     reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_CONTINUE  reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_SUBTRACTION reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_NOT       reduce using rule 64 (elseifs -> elseifs elseif .)
    TOKEN_BITWISE_NOT reduce using rule 64 (elseifs -> elseifs elseif .)


state 189

    (66) elseif -> TOKEN_ELSEIF TOKEN_LP . exp TOKEN_RP block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 192
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 190

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp . TOKEN_STEPS exp TOKEN_RP block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_STEPS     shift and go to state 193
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 191

    (63) if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .

    TOKEN_RCB       reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_VOID      reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_STATIC    reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_INT_TYPE  reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_REAL_TYPE reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_BOOL_TYPE reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_STRING_TYPE reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_ID        reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_SEMICOLON reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_INTEGER   reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_REAL      reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_TRUE      reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_FALSE     reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_STRING    reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_LP        reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_PRINT     reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_IF        reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_FOR       reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_WHILE     reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_RETURN    reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_BREAK     reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_CONTINUE  reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_SUBTRACTION reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_NOT       reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_BITWISE_NOT reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_ELSE      reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)
    TOKEN_ELSEIF    reduce using rule 63 (if -> TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block .)


state 192

    (66) elseif -> TOKEN_ELSEIF TOKEN_LP exp . TOKEN_RP block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_RP        shift and go to state 194
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 193

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS . exp TOKEN_RP block
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49

    exp                            shift and go to state 195
    lvalue                         shift and go to state 56
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    lvalue1                        shift and go to state 64
    lvalue2                        shift and go to state 65

state 194

    (66) elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 196
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 195

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp . TOKEN_RP block
    (85) binary_operation -> exp . TOKEN_ADDITION exp
    (86) binary_operation -> exp . TOKEN_SUBTRACTION exp
    (87) binary_operation -> exp . TOKEN_MULTIPLICATION exp
    (88) binary_operation -> exp . TOKEN_DIVISION exp
    (89) binary_operation -> exp . TOKEN_MODULO exp
    (90) binary_operation -> exp . TOKEN_POWER exp
    (91) binary_operation -> exp . TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> exp . TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> exp . TOKEN_AND exp
    (94) logical_operation -> exp . TOKEN_OR exp
    (95) comparison_operation -> exp . TOKEN_LT exp
    (96) comparison_operation -> exp . TOKEN_LE exp
    (97) comparison_operation -> exp . TOKEN_GT exp
    (98) comparison_operation -> exp . TOKEN_GE exp
    (99) comparison_operation -> exp . TOKEN_EQ exp
    (100) comparison_operation -> exp . TOKEN_NE exp
    (101) bitwise_operation -> exp . TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> exp . TOKEN_BITWISE_OR exp

    TOKEN_RP        shift and go to state 197
    TOKEN_ADDITION  shift and go to state 76
    TOKEN_SUBTRACTION shift and go to state 77
    TOKEN_MULTIPLICATION shift and go to state 78
    TOKEN_DIVISION  shift and go to state 79
    TOKEN_MODULO    shift and go to state 80
    TOKEN_POWER     shift and go to state 81
    TOKEN_SHIFT_LEFT shift and go to state 82
    TOKEN_SHIFT_RIGHT shift and go to state 83
    TOKEN_AND       shift and go to state 84
    TOKEN_OR        shift and go to state 85
    TOKEN_LT        shift and go to state 86
    TOKEN_LE        shift and go to state 87
    TOKEN_GT        shift and go to state 88
    TOKEN_GE        shift and go to state 89
    TOKEN_EQ        shift and go to state 90
    TOKEN_NE        shift and go to state 91
    TOKEN_BITWISE_AND shift and go to state 92
    TOKEN_BITWISE_OR shift and go to state 93


state 196

    (66) elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .

    TOKEN_ELSE      reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ELSEIF    reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_RCB       reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_VOID      reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STATIC    reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INT_TYPE  reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL_TYPE reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BOOL_TYPE reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING_TYPE reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_ID        reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SEMICOLON reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_INTEGER   reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_REAL      reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_TRUE      reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FALSE     reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_STRING    reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_LP        reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_PRINT     reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_IF        reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_FOR       reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_WHILE     reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_RETURN    reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BREAK     reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_CONTINUE  reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_SUBTRACTION reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_NOT       reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)
    TOKEN_BITWISE_NOT reduce using rule 66 (elseif -> TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP block .)


state 197

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP . block
    (37) block -> . TOKEN_LCB statements_list TOKEN_RCB
    (38) block -> . statement
    (41) statement -> . TOKEN_SEMICOLON
    (42) statement -> . exp TOKEN_SEMICOLON
    (43) statement -> . assignment
    (44) statement -> . print
    (45) statement -> . statement_var_dec
    (46) statement -> . if
    (47) statement -> . for
    (48) statement -> . while
    (49) statement -> . return
    (50) statement -> . break
    (51) statement -> . continue
    (72) exp -> . TOKEN_INTEGER
    (73) exp -> . TOKEN_REAL
    (74) exp -> . TOKEN_TRUE
    (75) exp -> . TOKEN_FALSE
    (76) exp -> . TOKEN_STRING
    (77) exp -> . lvalue
    (78) exp -> . binary_operation
    (79) exp -> . logical_operation
    (80) exp -> . comparison_operation
    (81) exp -> . bitwise_operation
    (82) exp -> . unary_operation
    (83) exp -> . TOKEN_LP exp TOKEN_RP
    (84) exp -> . function_call
    (52) assignment -> . lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
    (57) print -> . TOKEN_PRINT TOKEN_LP TOKEN_STRING TOKEN_RP TOKEN_SEMICOLON
    (58) statement_var_dec -> . return_type var_list TOKEN_SEMICOLON
    (59) statement_var_dec -> . lvalue1 var_list TOKEN_SEMICOLON
    (60) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block
    (61) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block TOKEN_ELSE block
    (62) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs
    (63) if -> . TOKEN_IF TOKEN_LP exp TOKEN_RP block elseifs TOKEN_ELSE block
    (67) for -> . TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block
    (68) while -> . TOKEN_WHILE TOKEN_LP exp TOKEN_RP block
    (69) return -> . TOKEN_RETURN exp TOKEN_SEMICOLON
    (70) break -> . TOKEN_BREAK TOKEN_SEMICOLON
    (71) continue -> . TOKEN_CONTINUE TOKEN_SEMICOLON
    (53) lvalue -> . lvalue1
    (54) lvalue -> . lvalue2
    (85) binary_operation -> . exp TOKEN_ADDITION exp
    (86) binary_operation -> . exp TOKEN_SUBTRACTION exp
    (87) binary_operation -> . exp TOKEN_MULTIPLICATION exp
    (88) binary_operation -> . exp TOKEN_DIVISION exp
    (89) binary_operation -> . exp TOKEN_MODULO exp
    (90) binary_operation -> . exp TOKEN_POWER exp
    (91) binary_operation -> . exp TOKEN_SHIFT_LEFT exp
    (92) binary_operation -> . exp TOKEN_SHIFT_RIGHT exp
    (93) logical_operation -> . exp TOKEN_AND exp
    (94) logical_operation -> . exp TOKEN_OR exp
    (95) comparison_operation -> . exp TOKEN_LT exp
    (96) comparison_operation -> . exp TOKEN_LE exp
    (97) comparison_operation -> . exp TOKEN_GT exp
    (98) comparison_operation -> . exp TOKEN_GE exp
    (99) comparison_operation -> . exp TOKEN_EQ exp
    (100) comparison_operation -> . exp TOKEN_NE exp
    (101) bitwise_operation -> . exp TOKEN_BITWISE_AND exp
    (102) bitwise_operation -> . exp TOKEN_BITWISE_OR exp
    (103) unary_operation -> . TOKEN_SUBTRACTION exp
    (104) unary_operation -> . TOKEN_NOT exp
    (105) unary_operation -> . TOKEN_BITWISE_NOT exp
    (106) function_call -> . TOKEN_ID function_call_body
    (107) function_call -> . TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body
    (18) return_type -> . TOKEN_INT_TYPE
    (19) return_type -> . TOKEN_REAL_TYPE
    (20) return_type -> . TOKEN_BOOL_TYPE
    (21) return_type -> . TOKEN_STRING_TYPE
    (56) lvalue1 -> . TOKEN_ID
    (55) lvalue2 -> . TOKEN_ID TOKEN_DOT TOKEN_ID

    TOKEN_LCB       shift and go to state 99
    TOKEN_SEMICOLON shift and go to state 101
    TOKEN_INTEGER   shift and go to state 51
    TOKEN_REAL      shift and go to state 52
    TOKEN_TRUE      shift and go to state 53
    TOKEN_FALSE     shift and go to state 54
    TOKEN_STRING    shift and go to state 55
    TOKEN_LP        shift and go to state 62
    TOKEN_PRINT     shift and go to state 113
    TOKEN_IF        shift and go to state 116
    TOKEN_FOR       shift and go to state 117
    TOKEN_WHILE     shift and go to state 118
    TOKEN_RETURN    shift and go to state 119
    TOKEN_BREAK     shift and go to state 120
    TOKEN_CONTINUE  shift and go to state 121
    TOKEN_SUBTRACTION shift and go to state 66
    TOKEN_NOT       shift and go to state 67
    TOKEN_BITWISE_NOT shift and go to state 68
    TOKEN_ID        shift and go to state 49
    TOKEN_INT_TYPE  shift and go to state 23
    TOKEN_REAL_TYPE shift and go to state 24
    TOKEN_BOOL_TYPE shift and go to state 25
    TOKEN_STRING_TYPE shift and go to state 26

    exp                            shift and go to state 102
    block                          shift and go to state 198
    statement                      shift and go to state 100
    assignment                     shift and go to state 103
    print                          shift and go to state 104
    statement_var_dec              shift and go to state 105
    if                             shift and go to state 106
    for                            shift and go to state 107
    while                          shift and go to state 108
    return                         shift and go to state 109
    break                          shift and go to state 110
    continue                       shift and go to state 111
    lvalue                         shift and go to state 112
    binary_operation               shift and go to state 57
    logical_operation              shift and go to state 58
    comparison_operation           shift and go to state 59
    bitwise_operation              shift and go to state 60
    unary_operation                shift and go to state 61
    function_call                  shift and go to state 63
    return_type                    shift and go to state 114
    lvalue1                        shift and go to state 115
    lvalue2                        shift and go to state 65

state 198

    (67) for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .

    TOKEN_RCB       reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_VOID      reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_STATIC    reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_INT_TYPE  reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_REAL_TYPE reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_BOOL_TYPE reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_STRING_TYPE reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_ID        reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_SEMICOLON reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_INTEGER   reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_REAL      reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_TRUE      reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_FALSE     reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_STRING    reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_LP        reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_PRINT     reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_IF        reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_FOR       reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_WHILE     reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_RETURN    reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_BREAK     reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_CONTINUE  reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_SUBTRACTION reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_NOT       reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_BITWISE_NOT reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_ELSE      reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)
    TOKEN_ELSEIF    reduce using rule 67 (for -> TOKEN_FOR TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP block .)

